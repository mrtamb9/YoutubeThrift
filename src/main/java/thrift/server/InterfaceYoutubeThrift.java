package thrift.server;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-10")
public class InterfaceYoutubeThrift {

  public interface Iface {

    public boolean clientInsertIP(String ip, String authentication) throws org.apache.thrift.TException;

    public boolean controllerUpdateIP(String ips, String emails, String passwords, String authentication) throws org.apache.thrift.TException;

    public boolean clientCheckStop(String ip, String authentication) throws org.apache.thrift.TException;

    public boolean clientSetLog(String ip, String log, String authentication) throws org.apache.thrift.TException;

    public Map<String,String> gettingParameterSearch(String authentication) throws org.apache.thrift.TException;

    public boolean settingParameterSearch(Map<String,String> mapParameters, String authentication) throws org.apache.thrift.TException;

    public Map<String,String> gettingParameterViewSuggest(String authentication) throws org.apache.thrift.TException;

    public boolean settingParameterViewSuggest(Map<String,String> mapParameters, String authentication) throws org.apache.thrift.TException;

    public Map<String,String> gettingParameterClickSuggest(String authentication) throws org.apache.thrift.TException;

    public boolean settingParameterClickSuggest(Map<String,String> mapParameters, String authentication) throws org.apache.thrift.TException;

    public boolean setStatus(String ips, String status, String authentication) throws org.apache.thrift.TException;

    public boolean deleteIP(String ips, String authentication) throws org.apache.thrift.TException;

    public List<String> gettingAllIP(String authentication) throws org.apache.thrift.TException;

    public List<String> gettingWarningIP(String authentication) throws org.apache.thrift.TException;

    public String gettingAuthentication(String username, String password) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void clientInsertIP(String ip, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void controllerUpdateIP(String ips, String emails, String passwords, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void clientCheckStop(String ip, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void clientSetLog(String ip, String log, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void gettingParameterSearch(String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void settingParameterSearch(Map<String,String> mapParameters, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void gettingParameterViewSuggest(String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void settingParameterViewSuggest(Map<String,String> mapParameters, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void gettingParameterClickSuggest(String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void settingParameterClickSuggest(Map<String,String> mapParameters, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setStatus(String ips, String status, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteIP(String ips, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void gettingAllIP(String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void gettingWarningIP(String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void gettingAuthentication(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean clientInsertIP(String ip, String authentication) throws org.apache.thrift.TException
    {
      send_clientInsertIP(ip, authentication);
      return recv_clientInsertIP();
    }

    public void send_clientInsertIP(String ip, String authentication) throws org.apache.thrift.TException
    {
      clientInsertIP_args args = new clientInsertIP_args();
      args.setIp(ip);
      args.setAuthentication(authentication);
      sendBase("clientInsertIP", args);
    }

    public boolean recv_clientInsertIP() throws org.apache.thrift.TException
    {
      clientInsertIP_result result = new clientInsertIP_result();
      receiveBase(result, "clientInsertIP");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "clientInsertIP failed: unknown result");
    }

    public boolean controllerUpdateIP(String ips, String emails, String passwords, String authentication) throws org.apache.thrift.TException
    {
      send_controllerUpdateIP(ips, emails, passwords, authentication);
      return recv_controllerUpdateIP();
    }

    public void send_controllerUpdateIP(String ips, String emails, String passwords, String authentication) throws org.apache.thrift.TException
    {
      controllerUpdateIP_args args = new controllerUpdateIP_args();
      args.setIps(ips);
      args.setEmails(emails);
      args.setPasswords(passwords);
      args.setAuthentication(authentication);
      sendBase("controllerUpdateIP", args);
    }

    public boolean recv_controllerUpdateIP() throws org.apache.thrift.TException
    {
      controllerUpdateIP_result result = new controllerUpdateIP_result();
      receiveBase(result, "controllerUpdateIP");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "controllerUpdateIP failed: unknown result");
    }

    public boolean clientCheckStop(String ip, String authentication) throws org.apache.thrift.TException
    {
      send_clientCheckStop(ip, authentication);
      return recv_clientCheckStop();
    }

    public void send_clientCheckStop(String ip, String authentication) throws org.apache.thrift.TException
    {
      clientCheckStop_args args = new clientCheckStop_args();
      args.setIp(ip);
      args.setAuthentication(authentication);
      sendBase("clientCheckStop", args);
    }

    public boolean recv_clientCheckStop() throws org.apache.thrift.TException
    {
      clientCheckStop_result result = new clientCheckStop_result();
      receiveBase(result, "clientCheckStop");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "clientCheckStop failed: unknown result");
    }

    public boolean clientSetLog(String ip, String log, String authentication) throws org.apache.thrift.TException
    {
      send_clientSetLog(ip, log, authentication);
      return recv_clientSetLog();
    }

    public void send_clientSetLog(String ip, String log, String authentication) throws org.apache.thrift.TException
    {
      clientSetLog_args args = new clientSetLog_args();
      args.setIp(ip);
      args.setLog(log);
      args.setAuthentication(authentication);
      sendBase("clientSetLog", args);
    }

    public boolean recv_clientSetLog() throws org.apache.thrift.TException
    {
      clientSetLog_result result = new clientSetLog_result();
      receiveBase(result, "clientSetLog");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "clientSetLog failed: unknown result");
    }

    public Map<String,String> gettingParameterSearch(String authentication) throws org.apache.thrift.TException
    {
      send_gettingParameterSearch(authentication);
      return recv_gettingParameterSearch();
    }

    public void send_gettingParameterSearch(String authentication) throws org.apache.thrift.TException
    {
      gettingParameterSearch_args args = new gettingParameterSearch_args();
      args.setAuthentication(authentication);
      sendBase("gettingParameterSearch", args);
    }

    public Map<String,String> recv_gettingParameterSearch() throws org.apache.thrift.TException
    {
      gettingParameterSearch_result result = new gettingParameterSearch_result();
      receiveBase(result, "gettingParameterSearch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "gettingParameterSearch failed: unknown result");
    }

    public boolean settingParameterSearch(Map<String,String> mapParameters, String authentication) throws org.apache.thrift.TException
    {
      send_settingParameterSearch(mapParameters, authentication);
      return recv_settingParameterSearch();
    }

    public void send_settingParameterSearch(Map<String,String> mapParameters, String authentication) throws org.apache.thrift.TException
    {
      settingParameterSearch_args args = new settingParameterSearch_args();
      args.setMapParameters(mapParameters);
      args.setAuthentication(authentication);
      sendBase("settingParameterSearch", args);
    }

    public boolean recv_settingParameterSearch() throws org.apache.thrift.TException
    {
      settingParameterSearch_result result = new settingParameterSearch_result();
      receiveBase(result, "settingParameterSearch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "settingParameterSearch failed: unknown result");
    }

    public Map<String,String> gettingParameterViewSuggest(String authentication) throws org.apache.thrift.TException
    {
      send_gettingParameterViewSuggest(authentication);
      return recv_gettingParameterViewSuggest();
    }

    public void send_gettingParameterViewSuggest(String authentication) throws org.apache.thrift.TException
    {
      gettingParameterViewSuggest_args args = new gettingParameterViewSuggest_args();
      args.setAuthentication(authentication);
      sendBase("gettingParameterViewSuggest", args);
    }

    public Map<String,String> recv_gettingParameterViewSuggest() throws org.apache.thrift.TException
    {
      gettingParameterViewSuggest_result result = new gettingParameterViewSuggest_result();
      receiveBase(result, "gettingParameterViewSuggest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "gettingParameterViewSuggest failed: unknown result");
    }

    public boolean settingParameterViewSuggest(Map<String,String> mapParameters, String authentication) throws org.apache.thrift.TException
    {
      send_settingParameterViewSuggest(mapParameters, authentication);
      return recv_settingParameterViewSuggest();
    }

    public void send_settingParameterViewSuggest(Map<String,String> mapParameters, String authentication) throws org.apache.thrift.TException
    {
      settingParameterViewSuggest_args args = new settingParameterViewSuggest_args();
      args.setMapParameters(mapParameters);
      args.setAuthentication(authentication);
      sendBase("settingParameterViewSuggest", args);
    }

    public boolean recv_settingParameterViewSuggest() throws org.apache.thrift.TException
    {
      settingParameterViewSuggest_result result = new settingParameterViewSuggest_result();
      receiveBase(result, "settingParameterViewSuggest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "settingParameterViewSuggest failed: unknown result");
    }

    public Map<String,String> gettingParameterClickSuggest(String authentication) throws org.apache.thrift.TException
    {
      send_gettingParameterClickSuggest(authentication);
      return recv_gettingParameterClickSuggest();
    }

    public void send_gettingParameterClickSuggest(String authentication) throws org.apache.thrift.TException
    {
      gettingParameterClickSuggest_args args = new gettingParameterClickSuggest_args();
      args.setAuthentication(authentication);
      sendBase("gettingParameterClickSuggest", args);
    }

    public Map<String,String> recv_gettingParameterClickSuggest() throws org.apache.thrift.TException
    {
      gettingParameterClickSuggest_result result = new gettingParameterClickSuggest_result();
      receiveBase(result, "gettingParameterClickSuggest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "gettingParameterClickSuggest failed: unknown result");
    }

    public boolean settingParameterClickSuggest(Map<String,String> mapParameters, String authentication) throws org.apache.thrift.TException
    {
      send_settingParameterClickSuggest(mapParameters, authentication);
      return recv_settingParameterClickSuggest();
    }

    public void send_settingParameterClickSuggest(Map<String,String> mapParameters, String authentication) throws org.apache.thrift.TException
    {
      settingParameterClickSuggest_args args = new settingParameterClickSuggest_args();
      args.setMapParameters(mapParameters);
      args.setAuthentication(authentication);
      sendBase("settingParameterClickSuggest", args);
    }

    public boolean recv_settingParameterClickSuggest() throws org.apache.thrift.TException
    {
      settingParameterClickSuggest_result result = new settingParameterClickSuggest_result();
      receiveBase(result, "settingParameterClickSuggest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "settingParameterClickSuggest failed: unknown result");
    }

    public boolean setStatus(String ips, String status, String authentication) throws org.apache.thrift.TException
    {
      send_setStatus(ips, status, authentication);
      return recv_setStatus();
    }

    public void send_setStatus(String ips, String status, String authentication) throws org.apache.thrift.TException
    {
      setStatus_args args = new setStatus_args();
      args.setIps(ips);
      args.setStatus(status);
      args.setAuthentication(authentication);
      sendBase("setStatus", args);
    }

    public boolean recv_setStatus() throws org.apache.thrift.TException
    {
      setStatus_result result = new setStatus_result();
      receiveBase(result, "setStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setStatus failed: unknown result");
    }

    public boolean deleteIP(String ips, String authentication) throws org.apache.thrift.TException
    {
      send_deleteIP(ips, authentication);
      return recv_deleteIP();
    }

    public void send_deleteIP(String ips, String authentication) throws org.apache.thrift.TException
    {
      deleteIP_args args = new deleteIP_args();
      args.setIps(ips);
      args.setAuthentication(authentication);
      sendBase("deleteIP", args);
    }

    public boolean recv_deleteIP() throws org.apache.thrift.TException
    {
      deleteIP_result result = new deleteIP_result();
      receiveBase(result, "deleteIP");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteIP failed: unknown result");
    }

    public List<String> gettingAllIP(String authentication) throws org.apache.thrift.TException
    {
      send_gettingAllIP(authentication);
      return recv_gettingAllIP();
    }

    public void send_gettingAllIP(String authentication) throws org.apache.thrift.TException
    {
      gettingAllIP_args args = new gettingAllIP_args();
      args.setAuthentication(authentication);
      sendBase("gettingAllIP", args);
    }

    public List<String> recv_gettingAllIP() throws org.apache.thrift.TException
    {
      gettingAllIP_result result = new gettingAllIP_result();
      receiveBase(result, "gettingAllIP");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "gettingAllIP failed: unknown result");
    }

    public List<String> gettingWarningIP(String authentication) throws org.apache.thrift.TException
    {
      send_gettingWarningIP(authentication);
      return recv_gettingWarningIP();
    }

    public void send_gettingWarningIP(String authentication) throws org.apache.thrift.TException
    {
      gettingWarningIP_args args = new gettingWarningIP_args();
      args.setAuthentication(authentication);
      sendBase("gettingWarningIP", args);
    }

    public List<String> recv_gettingWarningIP() throws org.apache.thrift.TException
    {
      gettingWarningIP_result result = new gettingWarningIP_result();
      receiveBase(result, "gettingWarningIP");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "gettingWarningIP failed: unknown result");
    }

    public String gettingAuthentication(String username, String password) throws org.apache.thrift.TException
    {
      send_gettingAuthentication(username, password);
      return recv_gettingAuthentication();
    }

    public void send_gettingAuthentication(String username, String password) throws org.apache.thrift.TException
    {
      gettingAuthentication_args args = new gettingAuthentication_args();
      args.setUsername(username);
      args.setPassword(password);
      sendBase("gettingAuthentication", args);
    }

    public String recv_gettingAuthentication() throws org.apache.thrift.TException
    {
      gettingAuthentication_result result = new gettingAuthentication_result();
      receiveBase(result, "gettingAuthentication");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "gettingAuthentication failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void clientInsertIP(String ip, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clientInsertIP_call method_call = new clientInsertIP_call(ip, authentication, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clientInsertIP_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ip;
      private String authentication;
      public clientInsertIP_call(String ip, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ip = ip;
        this.authentication = authentication;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clientInsertIP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clientInsertIP_args args = new clientInsertIP_args();
        args.setIp(ip);
        args.setAuthentication(authentication);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_clientInsertIP();
      }
    }

    public void controllerUpdateIP(String ips, String emails, String passwords, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      controllerUpdateIP_call method_call = new controllerUpdateIP_call(ips, emails, passwords, authentication, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class controllerUpdateIP_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ips;
      private String emails;
      private String passwords;
      private String authentication;
      public controllerUpdateIP_call(String ips, String emails, String passwords, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ips = ips;
        this.emails = emails;
        this.passwords = passwords;
        this.authentication = authentication;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("controllerUpdateIP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        controllerUpdateIP_args args = new controllerUpdateIP_args();
        args.setIps(ips);
        args.setEmails(emails);
        args.setPasswords(passwords);
        args.setAuthentication(authentication);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_controllerUpdateIP();
      }
    }

    public void clientCheckStop(String ip, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clientCheckStop_call method_call = new clientCheckStop_call(ip, authentication, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clientCheckStop_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ip;
      private String authentication;
      public clientCheckStop_call(String ip, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ip = ip;
        this.authentication = authentication;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clientCheckStop", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clientCheckStop_args args = new clientCheckStop_args();
        args.setIp(ip);
        args.setAuthentication(authentication);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_clientCheckStop();
      }
    }

    public void clientSetLog(String ip, String log, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clientSetLog_call method_call = new clientSetLog_call(ip, log, authentication, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clientSetLog_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ip;
      private String log;
      private String authentication;
      public clientSetLog_call(String ip, String log, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ip = ip;
        this.log = log;
        this.authentication = authentication;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clientSetLog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clientSetLog_args args = new clientSetLog_args();
        args.setIp(ip);
        args.setLog(log);
        args.setAuthentication(authentication);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_clientSetLog();
      }
    }

    public void gettingParameterSearch(String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      gettingParameterSearch_call method_call = new gettingParameterSearch_call(authentication, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class gettingParameterSearch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authentication;
      public gettingParameterSearch_call(String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("gettingParameterSearch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        gettingParameterSearch_args args = new gettingParameterSearch_args();
        args.setAuthentication(authentication);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_gettingParameterSearch();
      }
    }

    public void settingParameterSearch(Map<String,String> mapParameters, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      settingParameterSearch_call method_call = new settingParameterSearch_call(mapParameters, authentication, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class settingParameterSearch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> mapParameters;
      private String authentication;
      public settingParameterSearch_call(Map<String,String> mapParameters, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mapParameters = mapParameters;
        this.authentication = authentication;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("settingParameterSearch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        settingParameterSearch_args args = new settingParameterSearch_args();
        args.setMapParameters(mapParameters);
        args.setAuthentication(authentication);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_settingParameterSearch();
      }
    }

    public void gettingParameterViewSuggest(String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      gettingParameterViewSuggest_call method_call = new gettingParameterViewSuggest_call(authentication, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class gettingParameterViewSuggest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authentication;
      public gettingParameterViewSuggest_call(String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("gettingParameterViewSuggest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        gettingParameterViewSuggest_args args = new gettingParameterViewSuggest_args();
        args.setAuthentication(authentication);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_gettingParameterViewSuggest();
      }
    }

    public void settingParameterViewSuggest(Map<String,String> mapParameters, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      settingParameterViewSuggest_call method_call = new settingParameterViewSuggest_call(mapParameters, authentication, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class settingParameterViewSuggest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> mapParameters;
      private String authentication;
      public settingParameterViewSuggest_call(Map<String,String> mapParameters, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mapParameters = mapParameters;
        this.authentication = authentication;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("settingParameterViewSuggest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        settingParameterViewSuggest_args args = new settingParameterViewSuggest_args();
        args.setMapParameters(mapParameters);
        args.setAuthentication(authentication);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_settingParameterViewSuggest();
      }
    }

    public void gettingParameterClickSuggest(String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      gettingParameterClickSuggest_call method_call = new gettingParameterClickSuggest_call(authentication, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class gettingParameterClickSuggest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authentication;
      public gettingParameterClickSuggest_call(String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("gettingParameterClickSuggest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        gettingParameterClickSuggest_args args = new gettingParameterClickSuggest_args();
        args.setAuthentication(authentication);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_gettingParameterClickSuggest();
      }
    }

    public void settingParameterClickSuggest(Map<String,String> mapParameters, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      settingParameterClickSuggest_call method_call = new settingParameterClickSuggest_call(mapParameters, authentication, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class settingParameterClickSuggest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> mapParameters;
      private String authentication;
      public settingParameterClickSuggest_call(Map<String,String> mapParameters, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mapParameters = mapParameters;
        this.authentication = authentication;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("settingParameterClickSuggest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        settingParameterClickSuggest_args args = new settingParameterClickSuggest_args();
        args.setMapParameters(mapParameters);
        args.setAuthentication(authentication);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_settingParameterClickSuggest();
      }
    }

    public void setStatus(String ips, String status, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setStatus_call method_call = new setStatus_call(ips, status, authentication, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ips;
      private String status;
      private String authentication;
      public setStatus_call(String ips, String status, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ips = ips;
        this.status = status;
        this.authentication = authentication;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setStatus_args args = new setStatus_args();
        args.setIps(ips);
        args.setStatus(status);
        args.setAuthentication(authentication);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setStatus();
      }
    }

    public void deleteIP(String ips, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteIP_call method_call = new deleteIP_call(ips, authentication, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteIP_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ips;
      private String authentication;
      public deleteIP_call(String ips, String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ips = ips;
        this.authentication = authentication;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteIP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteIP_args args = new deleteIP_args();
        args.setIps(ips);
        args.setAuthentication(authentication);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteIP();
      }
    }

    public void gettingAllIP(String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      gettingAllIP_call method_call = new gettingAllIP_call(authentication, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class gettingAllIP_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authentication;
      public gettingAllIP_call(String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("gettingAllIP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        gettingAllIP_args args = new gettingAllIP_args();
        args.setAuthentication(authentication);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_gettingAllIP();
      }
    }

    public void gettingWarningIP(String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      gettingWarningIP_call method_call = new gettingWarningIP_call(authentication, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class gettingWarningIP_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String authentication;
      public gettingWarningIP_call(String authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("gettingWarningIP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        gettingWarningIP_args args = new gettingWarningIP_args();
        args.setAuthentication(authentication);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_gettingWarningIP();
      }
    }

    public void gettingAuthentication(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      gettingAuthentication_call method_call = new gettingAuthentication_call(username, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class gettingAuthentication_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String password;
      public gettingAuthentication_call(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("gettingAuthentication", org.apache.thrift.protocol.TMessageType.CALL, 0));
        gettingAuthentication_args args = new gettingAuthentication_args();
        args.setUsername(username);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_gettingAuthentication();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("clientInsertIP", new clientInsertIP());
      processMap.put("controllerUpdateIP", new controllerUpdateIP());
      processMap.put("clientCheckStop", new clientCheckStop());
      processMap.put("clientSetLog", new clientSetLog());
      processMap.put("gettingParameterSearch", new gettingParameterSearch());
      processMap.put("settingParameterSearch", new settingParameterSearch());
      processMap.put("gettingParameterViewSuggest", new gettingParameterViewSuggest());
      processMap.put("settingParameterViewSuggest", new settingParameterViewSuggest());
      processMap.put("gettingParameterClickSuggest", new gettingParameterClickSuggest());
      processMap.put("settingParameterClickSuggest", new settingParameterClickSuggest());
      processMap.put("setStatus", new setStatus());
      processMap.put("deleteIP", new deleteIP());
      processMap.put("gettingAllIP", new gettingAllIP());
      processMap.put("gettingWarningIP", new gettingWarningIP());
      processMap.put("gettingAuthentication", new gettingAuthentication());
      return processMap;
    }

    public static class clientInsertIP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clientInsertIP_args> {
      public clientInsertIP() {
        super("clientInsertIP");
      }

      public clientInsertIP_args getEmptyArgsInstance() {
        return new clientInsertIP_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public clientInsertIP_result getResult(I iface, clientInsertIP_args args) throws org.apache.thrift.TException {
        clientInsertIP_result result = new clientInsertIP_result();
        result.success = iface.clientInsertIP(args.ip, args.authentication);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class controllerUpdateIP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, controllerUpdateIP_args> {
      public controllerUpdateIP() {
        super("controllerUpdateIP");
      }

      public controllerUpdateIP_args getEmptyArgsInstance() {
        return new controllerUpdateIP_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public controllerUpdateIP_result getResult(I iface, controllerUpdateIP_args args) throws org.apache.thrift.TException {
        controllerUpdateIP_result result = new controllerUpdateIP_result();
        result.success = iface.controllerUpdateIP(args.ips, args.emails, args.passwords, args.authentication);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class clientCheckStop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clientCheckStop_args> {
      public clientCheckStop() {
        super("clientCheckStop");
      }

      public clientCheckStop_args getEmptyArgsInstance() {
        return new clientCheckStop_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public clientCheckStop_result getResult(I iface, clientCheckStop_args args) throws org.apache.thrift.TException {
        clientCheckStop_result result = new clientCheckStop_result();
        result.success = iface.clientCheckStop(args.ip, args.authentication);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class clientSetLog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clientSetLog_args> {
      public clientSetLog() {
        super("clientSetLog");
      }

      public clientSetLog_args getEmptyArgsInstance() {
        return new clientSetLog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public clientSetLog_result getResult(I iface, clientSetLog_args args) throws org.apache.thrift.TException {
        clientSetLog_result result = new clientSetLog_result();
        result.success = iface.clientSetLog(args.ip, args.log, args.authentication);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class gettingParameterSearch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, gettingParameterSearch_args> {
      public gettingParameterSearch() {
        super("gettingParameterSearch");
      }

      public gettingParameterSearch_args getEmptyArgsInstance() {
        return new gettingParameterSearch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public gettingParameterSearch_result getResult(I iface, gettingParameterSearch_args args) throws org.apache.thrift.TException {
        gettingParameterSearch_result result = new gettingParameterSearch_result();
        result.success = iface.gettingParameterSearch(args.authentication);
        return result;
      }
    }

    public static class settingParameterSearch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, settingParameterSearch_args> {
      public settingParameterSearch() {
        super("settingParameterSearch");
      }

      public settingParameterSearch_args getEmptyArgsInstance() {
        return new settingParameterSearch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public settingParameterSearch_result getResult(I iface, settingParameterSearch_args args) throws org.apache.thrift.TException {
        settingParameterSearch_result result = new settingParameterSearch_result();
        result.success = iface.settingParameterSearch(args.mapParameters, args.authentication);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class gettingParameterViewSuggest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, gettingParameterViewSuggest_args> {
      public gettingParameterViewSuggest() {
        super("gettingParameterViewSuggest");
      }

      public gettingParameterViewSuggest_args getEmptyArgsInstance() {
        return new gettingParameterViewSuggest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public gettingParameterViewSuggest_result getResult(I iface, gettingParameterViewSuggest_args args) throws org.apache.thrift.TException {
        gettingParameterViewSuggest_result result = new gettingParameterViewSuggest_result();
        result.success = iface.gettingParameterViewSuggest(args.authentication);
        return result;
      }
    }

    public static class settingParameterViewSuggest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, settingParameterViewSuggest_args> {
      public settingParameterViewSuggest() {
        super("settingParameterViewSuggest");
      }

      public settingParameterViewSuggest_args getEmptyArgsInstance() {
        return new settingParameterViewSuggest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public settingParameterViewSuggest_result getResult(I iface, settingParameterViewSuggest_args args) throws org.apache.thrift.TException {
        settingParameterViewSuggest_result result = new settingParameterViewSuggest_result();
        result.success = iface.settingParameterViewSuggest(args.mapParameters, args.authentication);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class gettingParameterClickSuggest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, gettingParameterClickSuggest_args> {
      public gettingParameterClickSuggest() {
        super("gettingParameterClickSuggest");
      }

      public gettingParameterClickSuggest_args getEmptyArgsInstance() {
        return new gettingParameterClickSuggest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public gettingParameterClickSuggest_result getResult(I iface, gettingParameterClickSuggest_args args) throws org.apache.thrift.TException {
        gettingParameterClickSuggest_result result = new gettingParameterClickSuggest_result();
        result.success = iface.gettingParameterClickSuggest(args.authentication);
        return result;
      }
    }

    public static class settingParameterClickSuggest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, settingParameterClickSuggest_args> {
      public settingParameterClickSuggest() {
        super("settingParameterClickSuggest");
      }

      public settingParameterClickSuggest_args getEmptyArgsInstance() {
        return new settingParameterClickSuggest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public settingParameterClickSuggest_result getResult(I iface, settingParameterClickSuggest_args args) throws org.apache.thrift.TException {
        settingParameterClickSuggest_result result = new settingParameterClickSuggest_result();
        result.success = iface.settingParameterClickSuggest(args.mapParameters, args.authentication);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class setStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setStatus_args> {
      public setStatus() {
        super("setStatus");
      }

      public setStatus_args getEmptyArgsInstance() {
        return new setStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setStatus_result getResult(I iface, setStatus_args args) throws org.apache.thrift.TException {
        setStatus_result result = new setStatus_result();
        result.success = iface.setStatus(args.ips, args.status, args.authentication);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteIP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteIP_args> {
      public deleteIP() {
        super("deleteIP");
      }

      public deleteIP_args getEmptyArgsInstance() {
        return new deleteIP_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteIP_result getResult(I iface, deleteIP_args args) throws org.apache.thrift.TException {
        deleteIP_result result = new deleteIP_result();
        result.success = iface.deleteIP(args.ips, args.authentication);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class gettingAllIP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, gettingAllIP_args> {
      public gettingAllIP() {
        super("gettingAllIP");
      }

      public gettingAllIP_args getEmptyArgsInstance() {
        return new gettingAllIP_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public gettingAllIP_result getResult(I iface, gettingAllIP_args args) throws org.apache.thrift.TException {
        gettingAllIP_result result = new gettingAllIP_result();
        result.success = iface.gettingAllIP(args.authentication);
        return result;
      }
    }

    public static class gettingWarningIP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, gettingWarningIP_args> {
      public gettingWarningIP() {
        super("gettingWarningIP");
      }

      public gettingWarningIP_args getEmptyArgsInstance() {
        return new gettingWarningIP_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public gettingWarningIP_result getResult(I iface, gettingWarningIP_args args) throws org.apache.thrift.TException {
        gettingWarningIP_result result = new gettingWarningIP_result();
        result.success = iface.gettingWarningIP(args.authentication);
        return result;
      }
    }

    public static class gettingAuthentication<I extends Iface> extends org.apache.thrift.ProcessFunction<I, gettingAuthentication_args> {
      public gettingAuthentication() {
        super("gettingAuthentication");
      }

      public gettingAuthentication_args getEmptyArgsInstance() {
        return new gettingAuthentication_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public gettingAuthentication_result getResult(I iface, gettingAuthentication_args args) throws org.apache.thrift.TException {
        gettingAuthentication_result result = new gettingAuthentication_result();
        result.success = iface.gettingAuthentication(args.username, args.password);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("clientInsertIP", new clientInsertIP());
      processMap.put("controllerUpdateIP", new controllerUpdateIP());
      processMap.put("clientCheckStop", new clientCheckStop());
      processMap.put("clientSetLog", new clientSetLog());
      processMap.put("gettingParameterSearch", new gettingParameterSearch());
      processMap.put("settingParameterSearch", new settingParameterSearch());
      processMap.put("gettingParameterViewSuggest", new gettingParameterViewSuggest());
      processMap.put("settingParameterViewSuggest", new settingParameterViewSuggest());
      processMap.put("gettingParameterClickSuggest", new gettingParameterClickSuggest());
      processMap.put("settingParameterClickSuggest", new settingParameterClickSuggest());
      processMap.put("setStatus", new setStatus());
      processMap.put("deleteIP", new deleteIP());
      processMap.put("gettingAllIP", new gettingAllIP());
      processMap.put("gettingWarningIP", new gettingWarningIP());
      processMap.put("gettingAuthentication", new gettingAuthentication());
      return processMap;
    }

    public static class clientInsertIP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, clientInsertIP_args, Boolean> {
      public clientInsertIP() {
        super("clientInsertIP");
      }

      public clientInsertIP_args getEmptyArgsInstance() {
        return new clientInsertIP_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            clientInsertIP_result result = new clientInsertIP_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            clientInsertIP_result result = new clientInsertIP_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, clientInsertIP_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.clientInsertIP(args.ip, args.authentication,resultHandler);
      }
    }

    public static class controllerUpdateIP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, controllerUpdateIP_args, Boolean> {
      public controllerUpdateIP() {
        super("controllerUpdateIP");
      }

      public controllerUpdateIP_args getEmptyArgsInstance() {
        return new controllerUpdateIP_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            controllerUpdateIP_result result = new controllerUpdateIP_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            controllerUpdateIP_result result = new controllerUpdateIP_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, controllerUpdateIP_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.controllerUpdateIP(args.ips, args.emails, args.passwords, args.authentication,resultHandler);
      }
    }

    public static class clientCheckStop<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, clientCheckStop_args, Boolean> {
      public clientCheckStop() {
        super("clientCheckStop");
      }

      public clientCheckStop_args getEmptyArgsInstance() {
        return new clientCheckStop_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            clientCheckStop_result result = new clientCheckStop_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            clientCheckStop_result result = new clientCheckStop_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, clientCheckStop_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.clientCheckStop(args.ip, args.authentication,resultHandler);
      }
    }

    public static class clientSetLog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, clientSetLog_args, Boolean> {
      public clientSetLog() {
        super("clientSetLog");
      }

      public clientSetLog_args getEmptyArgsInstance() {
        return new clientSetLog_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            clientSetLog_result result = new clientSetLog_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            clientSetLog_result result = new clientSetLog_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, clientSetLog_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.clientSetLog(args.ip, args.log, args.authentication,resultHandler);
      }
    }

    public static class gettingParameterSearch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, gettingParameterSearch_args, Map<String,String>> {
      public gettingParameterSearch() {
        super("gettingParameterSearch");
      }

      public gettingParameterSearch_args getEmptyArgsInstance() {
        return new gettingParameterSearch_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            gettingParameterSearch_result result = new gettingParameterSearch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            gettingParameterSearch_result result = new gettingParameterSearch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, gettingParameterSearch_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.gettingParameterSearch(args.authentication,resultHandler);
      }
    }

    public static class settingParameterSearch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, settingParameterSearch_args, Boolean> {
      public settingParameterSearch() {
        super("settingParameterSearch");
      }

      public settingParameterSearch_args getEmptyArgsInstance() {
        return new settingParameterSearch_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            settingParameterSearch_result result = new settingParameterSearch_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            settingParameterSearch_result result = new settingParameterSearch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, settingParameterSearch_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.settingParameterSearch(args.mapParameters, args.authentication,resultHandler);
      }
    }

    public static class gettingParameterViewSuggest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, gettingParameterViewSuggest_args, Map<String,String>> {
      public gettingParameterViewSuggest() {
        super("gettingParameterViewSuggest");
      }

      public gettingParameterViewSuggest_args getEmptyArgsInstance() {
        return new gettingParameterViewSuggest_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            gettingParameterViewSuggest_result result = new gettingParameterViewSuggest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            gettingParameterViewSuggest_result result = new gettingParameterViewSuggest_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, gettingParameterViewSuggest_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.gettingParameterViewSuggest(args.authentication,resultHandler);
      }
    }

    public static class settingParameterViewSuggest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, settingParameterViewSuggest_args, Boolean> {
      public settingParameterViewSuggest() {
        super("settingParameterViewSuggest");
      }

      public settingParameterViewSuggest_args getEmptyArgsInstance() {
        return new settingParameterViewSuggest_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            settingParameterViewSuggest_result result = new settingParameterViewSuggest_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            settingParameterViewSuggest_result result = new settingParameterViewSuggest_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, settingParameterViewSuggest_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.settingParameterViewSuggest(args.mapParameters, args.authentication,resultHandler);
      }
    }

    public static class gettingParameterClickSuggest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, gettingParameterClickSuggest_args, Map<String,String>> {
      public gettingParameterClickSuggest() {
        super("gettingParameterClickSuggest");
      }

      public gettingParameterClickSuggest_args getEmptyArgsInstance() {
        return new gettingParameterClickSuggest_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            gettingParameterClickSuggest_result result = new gettingParameterClickSuggest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            gettingParameterClickSuggest_result result = new gettingParameterClickSuggest_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, gettingParameterClickSuggest_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.gettingParameterClickSuggest(args.authentication,resultHandler);
      }
    }

    public static class settingParameterClickSuggest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, settingParameterClickSuggest_args, Boolean> {
      public settingParameterClickSuggest() {
        super("settingParameterClickSuggest");
      }

      public settingParameterClickSuggest_args getEmptyArgsInstance() {
        return new settingParameterClickSuggest_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            settingParameterClickSuggest_result result = new settingParameterClickSuggest_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            settingParameterClickSuggest_result result = new settingParameterClickSuggest_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, settingParameterClickSuggest_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.settingParameterClickSuggest(args.mapParameters, args.authentication,resultHandler);
      }
    }

    public static class setStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setStatus_args, Boolean> {
      public setStatus() {
        super("setStatus");
      }

      public setStatus_args getEmptyArgsInstance() {
        return new setStatus_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setStatus_result result = new setStatus_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setStatus_result result = new setStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setStatus_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setStatus(args.ips, args.status, args.authentication,resultHandler);
      }
    }

    public static class deleteIP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteIP_args, Boolean> {
      public deleteIP() {
        super("deleteIP");
      }

      public deleteIP_args getEmptyArgsInstance() {
        return new deleteIP_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteIP_result result = new deleteIP_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteIP_result result = new deleteIP_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteIP_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteIP(args.ips, args.authentication,resultHandler);
      }
    }

    public static class gettingAllIP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, gettingAllIP_args, List<String>> {
      public gettingAllIP() {
        super("gettingAllIP");
      }

      public gettingAllIP_args getEmptyArgsInstance() {
        return new gettingAllIP_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            gettingAllIP_result result = new gettingAllIP_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            gettingAllIP_result result = new gettingAllIP_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, gettingAllIP_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.gettingAllIP(args.authentication,resultHandler);
      }
    }

    public static class gettingWarningIP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, gettingWarningIP_args, List<String>> {
      public gettingWarningIP() {
        super("gettingWarningIP");
      }

      public gettingWarningIP_args getEmptyArgsInstance() {
        return new gettingWarningIP_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            gettingWarningIP_result result = new gettingWarningIP_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            gettingWarningIP_result result = new gettingWarningIP_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, gettingWarningIP_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.gettingWarningIP(args.authentication,resultHandler);
      }
    }

    public static class gettingAuthentication<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, gettingAuthentication_args, String> {
      public gettingAuthentication() {
        super("gettingAuthentication");
      }

      public gettingAuthentication_args getEmptyArgsInstance() {
        return new gettingAuthentication_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            gettingAuthentication_result result = new gettingAuthentication_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            gettingAuthentication_result result = new gettingAuthentication_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, gettingAuthentication_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.gettingAuthentication(args.username, args.password,resultHandler);
      }
    }

  }

  public static class clientInsertIP_args implements org.apache.thrift.TBase<clientInsertIP_args, clientInsertIP_args._Fields>, java.io.Serializable, Cloneable, Comparable<clientInsertIP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clientInsertIP_args");

    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clientInsertIP_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clientInsertIP_argsTupleSchemeFactory());
    }

    public String ip; // required
    public String authentication; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP((short)1, "ip"),
      AUTHENTICATION((short)2, "authentication");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP
            return IP;
          case 2: // AUTHENTICATION
            return AUTHENTICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clientInsertIP_args.class, metaDataMap);
    }

    public clientInsertIP_args() {
    }

    public clientInsertIP_args(
      String ip,
      String authentication)
    {
      this();
      this.ip = ip;
      this.authentication = authentication;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clientInsertIP_args(clientInsertIP_args other) {
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
      if (other.isSetAuthentication()) {
        this.authentication = other.authentication;
      }
    }

    public clientInsertIP_args deepCopy() {
      return new clientInsertIP_args(this);
    }

    @Override
    public void clear() {
      this.ip = null;
      this.authentication = null;
    }

    public String getIp() {
      return this.ip;
    }

    public clientInsertIP_args setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public String getAuthentication() {
      return this.authentication;
    }

    public clientInsertIP_args setAuthentication(String authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((String)value);
        }
        break;

      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IP:
        return getIp();

      case AUTHENTICATION:
        return getAuthentication();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IP:
        return isSetIp();
      case AUTHENTICATION:
        return isSetAuthentication();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clientInsertIP_args)
        return this.equals((clientInsertIP_args)that);
      return false;
    }

    public boolean equals(clientInsertIP_args that) {
      if (that == null)
        return false;

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ip = true && (isSetIp());
      list.add(present_ip);
      if (present_ip)
        list.add(ip);

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      return list.hashCode();
    }

    @Override
    public int compareTo(clientInsertIP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clientInsertIP_args(");
      boolean first = true;

      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clientInsertIP_argsStandardSchemeFactory implements SchemeFactory {
      public clientInsertIP_argsStandardScheme getScheme() {
        return new clientInsertIP_argsStandardScheme();
      }
    }

    private static class clientInsertIP_argsStandardScheme extends StandardScheme<clientInsertIP_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clientInsertIP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authentication = iprot.readString();
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clientInsertIP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          oprot.writeString(struct.authentication);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clientInsertIP_argsTupleSchemeFactory implements SchemeFactory {
      public clientInsertIP_argsTupleScheme getScheme() {
        return new clientInsertIP_argsTupleScheme();
      }
    }

    private static class clientInsertIP_argsTupleScheme extends TupleScheme<clientInsertIP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clientInsertIP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIp()) {
          optionals.set(0);
        }
        if (struct.isSetAuthentication()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
        if (struct.isSetAuthentication()) {
          oprot.writeString(struct.authentication);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clientInsertIP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authentication = iprot.readString();
          struct.setAuthenticationIsSet(true);
        }
      }
    }

  }

  public static class clientInsertIP_result implements org.apache.thrift.TBase<clientInsertIP_result, clientInsertIP_result._Fields>, java.io.Serializable, Cloneable, Comparable<clientInsertIP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clientInsertIP_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clientInsertIP_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clientInsertIP_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clientInsertIP_result.class, metaDataMap);
    }

    public clientInsertIP_result() {
    }

    public clientInsertIP_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clientInsertIP_result(clientInsertIP_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public clientInsertIP_result deepCopy() {
      return new clientInsertIP_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public clientInsertIP_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clientInsertIP_result)
        return this.equals((clientInsertIP_result)that);
      return false;
    }

    public boolean equals(clientInsertIP_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(clientInsertIP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clientInsertIP_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clientInsertIP_resultStandardSchemeFactory implements SchemeFactory {
      public clientInsertIP_resultStandardScheme getScheme() {
        return new clientInsertIP_resultStandardScheme();
      }
    }

    private static class clientInsertIP_resultStandardScheme extends StandardScheme<clientInsertIP_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clientInsertIP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clientInsertIP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clientInsertIP_resultTupleSchemeFactory implements SchemeFactory {
      public clientInsertIP_resultTupleScheme getScheme() {
        return new clientInsertIP_resultTupleScheme();
      }
    }

    private static class clientInsertIP_resultTupleScheme extends TupleScheme<clientInsertIP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clientInsertIP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clientInsertIP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class controllerUpdateIP_args implements org.apache.thrift.TBase<controllerUpdateIP_args, controllerUpdateIP_args._Fields>, java.io.Serializable, Cloneable, Comparable<controllerUpdateIP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("controllerUpdateIP_args");

    private static final org.apache.thrift.protocol.TField IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("ips", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EMAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("emails", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("passwords", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new controllerUpdateIP_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new controllerUpdateIP_argsTupleSchemeFactory());
    }

    public String ips; // required
    public String emails; // required
    public String passwords; // required
    public String authentication; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IPS((short)1, "ips"),
      EMAILS((short)2, "emails"),
      PASSWORDS((short)3, "passwords"),
      AUTHENTICATION((short)4, "authentication");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IPS
            return IPS;
          case 2: // EMAILS
            return EMAILS;
          case 3: // PASSWORDS
            return PASSWORDS;
          case 4: // AUTHENTICATION
            return AUTHENTICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IPS, new org.apache.thrift.meta_data.FieldMetaData("ips", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EMAILS, new org.apache.thrift.meta_data.FieldMetaData("emails", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORDS, new org.apache.thrift.meta_data.FieldMetaData("passwords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(controllerUpdateIP_args.class, metaDataMap);
    }

    public controllerUpdateIP_args() {
    }

    public controllerUpdateIP_args(
      String ips,
      String emails,
      String passwords,
      String authentication)
    {
      this();
      this.ips = ips;
      this.emails = emails;
      this.passwords = passwords;
      this.authentication = authentication;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public controllerUpdateIP_args(controllerUpdateIP_args other) {
      if (other.isSetIps()) {
        this.ips = other.ips;
      }
      if (other.isSetEmails()) {
        this.emails = other.emails;
      }
      if (other.isSetPasswords()) {
        this.passwords = other.passwords;
      }
      if (other.isSetAuthentication()) {
        this.authentication = other.authentication;
      }
    }

    public controllerUpdateIP_args deepCopy() {
      return new controllerUpdateIP_args(this);
    }

    @Override
    public void clear() {
      this.ips = null;
      this.emails = null;
      this.passwords = null;
      this.authentication = null;
    }

    public String getIps() {
      return this.ips;
    }

    public controllerUpdateIP_args setIps(String ips) {
      this.ips = ips;
      return this;
    }

    public void unsetIps() {
      this.ips = null;
    }

    /** Returns true if field ips is set (has been assigned a value) and false otherwise */
    public boolean isSetIps() {
      return this.ips != null;
    }

    public void setIpsIsSet(boolean value) {
      if (!value) {
        this.ips = null;
      }
    }

    public String getEmails() {
      return this.emails;
    }

    public controllerUpdateIP_args setEmails(String emails) {
      this.emails = emails;
      return this;
    }

    public void unsetEmails() {
      this.emails = null;
    }

    /** Returns true if field emails is set (has been assigned a value) and false otherwise */
    public boolean isSetEmails() {
      return this.emails != null;
    }

    public void setEmailsIsSet(boolean value) {
      if (!value) {
        this.emails = null;
      }
    }

    public String getPasswords() {
      return this.passwords;
    }

    public controllerUpdateIP_args setPasswords(String passwords) {
      this.passwords = passwords;
      return this;
    }

    public void unsetPasswords() {
      this.passwords = null;
    }

    /** Returns true if field passwords is set (has been assigned a value) and false otherwise */
    public boolean isSetPasswords() {
      return this.passwords != null;
    }

    public void setPasswordsIsSet(boolean value) {
      if (!value) {
        this.passwords = null;
      }
    }

    public String getAuthentication() {
      return this.authentication;
    }

    public controllerUpdateIP_args setAuthentication(String authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IPS:
        if (value == null) {
          unsetIps();
        } else {
          setIps((String)value);
        }
        break;

      case EMAILS:
        if (value == null) {
          unsetEmails();
        } else {
          setEmails((String)value);
        }
        break;

      case PASSWORDS:
        if (value == null) {
          unsetPasswords();
        } else {
          setPasswords((String)value);
        }
        break;

      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IPS:
        return getIps();

      case EMAILS:
        return getEmails();

      case PASSWORDS:
        return getPasswords();

      case AUTHENTICATION:
        return getAuthentication();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IPS:
        return isSetIps();
      case EMAILS:
        return isSetEmails();
      case PASSWORDS:
        return isSetPasswords();
      case AUTHENTICATION:
        return isSetAuthentication();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof controllerUpdateIP_args)
        return this.equals((controllerUpdateIP_args)that);
      return false;
    }

    public boolean equals(controllerUpdateIP_args that) {
      if (that == null)
        return false;

      boolean this_present_ips = true && this.isSetIps();
      boolean that_present_ips = true && that.isSetIps();
      if (this_present_ips || that_present_ips) {
        if (!(this_present_ips && that_present_ips))
          return false;
        if (!this.ips.equals(that.ips))
          return false;
      }

      boolean this_present_emails = true && this.isSetEmails();
      boolean that_present_emails = true && that.isSetEmails();
      if (this_present_emails || that_present_emails) {
        if (!(this_present_emails && that_present_emails))
          return false;
        if (!this.emails.equals(that.emails))
          return false;
      }

      boolean this_present_passwords = true && this.isSetPasswords();
      boolean that_present_passwords = true && that.isSetPasswords();
      if (this_present_passwords || that_present_passwords) {
        if (!(this_present_passwords && that_present_passwords))
          return false;
        if (!this.passwords.equals(that.passwords))
          return false;
      }

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ips = true && (isSetIps());
      list.add(present_ips);
      if (present_ips)
        list.add(ips);

      boolean present_emails = true && (isSetEmails());
      list.add(present_emails);
      if (present_emails)
        list.add(emails);

      boolean present_passwords = true && (isSetPasswords());
      list.add(present_passwords);
      if (present_passwords)
        list.add(passwords);

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      return list.hashCode();
    }

    @Override
    public int compareTo(controllerUpdateIP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIps()).compareTo(other.isSetIps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ips, other.ips);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEmails()).compareTo(other.isSetEmails());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmails()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emails, other.emails);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPasswords()).compareTo(other.isSetPasswords());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPasswords()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwords, other.passwords);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("controllerUpdateIP_args(");
      boolean first = true;

      sb.append("ips:");
      if (this.ips == null) {
        sb.append("null");
      } else {
        sb.append(this.ips);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("emails:");
      if (this.emails == null) {
        sb.append("null");
      } else {
        sb.append(this.emails);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("passwords:");
      if (this.passwords == null) {
        sb.append("null");
      } else {
        sb.append(this.passwords);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class controllerUpdateIP_argsStandardSchemeFactory implements SchemeFactory {
      public controllerUpdateIP_argsStandardScheme getScheme() {
        return new controllerUpdateIP_argsStandardScheme();
      }
    }

    private static class controllerUpdateIP_argsStandardScheme extends StandardScheme<controllerUpdateIP_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, controllerUpdateIP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ips = iprot.readString();
                struct.setIpsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EMAILS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.emails = iprot.readString();
                struct.setEmailsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.passwords = iprot.readString();
                struct.setPasswordsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authentication = iprot.readString();
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, controllerUpdateIP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ips != null) {
          oprot.writeFieldBegin(IPS_FIELD_DESC);
          oprot.writeString(struct.ips);
          oprot.writeFieldEnd();
        }
        if (struct.emails != null) {
          oprot.writeFieldBegin(EMAILS_FIELD_DESC);
          oprot.writeString(struct.emails);
          oprot.writeFieldEnd();
        }
        if (struct.passwords != null) {
          oprot.writeFieldBegin(PASSWORDS_FIELD_DESC);
          oprot.writeString(struct.passwords);
          oprot.writeFieldEnd();
        }
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          oprot.writeString(struct.authentication);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class controllerUpdateIP_argsTupleSchemeFactory implements SchemeFactory {
      public controllerUpdateIP_argsTupleScheme getScheme() {
        return new controllerUpdateIP_argsTupleScheme();
      }
    }

    private static class controllerUpdateIP_argsTupleScheme extends TupleScheme<controllerUpdateIP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, controllerUpdateIP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIps()) {
          optionals.set(0);
        }
        if (struct.isSetEmails()) {
          optionals.set(1);
        }
        if (struct.isSetPasswords()) {
          optionals.set(2);
        }
        if (struct.isSetAuthentication()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetIps()) {
          oprot.writeString(struct.ips);
        }
        if (struct.isSetEmails()) {
          oprot.writeString(struct.emails);
        }
        if (struct.isSetPasswords()) {
          oprot.writeString(struct.passwords);
        }
        if (struct.isSetAuthentication()) {
          oprot.writeString(struct.authentication);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, controllerUpdateIP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.ips = iprot.readString();
          struct.setIpsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.emails = iprot.readString();
          struct.setEmailsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.passwords = iprot.readString();
          struct.setPasswordsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.authentication = iprot.readString();
          struct.setAuthenticationIsSet(true);
        }
      }
    }

  }

  public static class controllerUpdateIP_result implements org.apache.thrift.TBase<controllerUpdateIP_result, controllerUpdateIP_result._Fields>, java.io.Serializable, Cloneable, Comparable<controllerUpdateIP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("controllerUpdateIP_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new controllerUpdateIP_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new controllerUpdateIP_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(controllerUpdateIP_result.class, metaDataMap);
    }

    public controllerUpdateIP_result() {
    }

    public controllerUpdateIP_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public controllerUpdateIP_result(controllerUpdateIP_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public controllerUpdateIP_result deepCopy() {
      return new controllerUpdateIP_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public controllerUpdateIP_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof controllerUpdateIP_result)
        return this.equals((controllerUpdateIP_result)that);
      return false;
    }

    public boolean equals(controllerUpdateIP_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(controllerUpdateIP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("controllerUpdateIP_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class controllerUpdateIP_resultStandardSchemeFactory implements SchemeFactory {
      public controllerUpdateIP_resultStandardScheme getScheme() {
        return new controllerUpdateIP_resultStandardScheme();
      }
    }

    private static class controllerUpdateIP_resultStandardScheme extends StandardScheme<controllerUpdateIP_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, controllerUpdateIP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, controllerUpdateIP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class controllerUpdateIP_resultTupleSchemeFactory implements SchemeFactory {
      public controllerUpdateIP_resultTupleScheme getScheme() {
        return new controllerUpdateIP_resultTupleScheme();
      }
    }

    private static class controllerUpdateIP_resultTupleScheme extends TupleScheme<controllerUpdateIP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, controllerUpdateIP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, controllerUpdateIP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class clientCheckStop_args implements org.apache.thrift.TBase<clientCheckStop_args, clientCheckStop_args._Fields>, java.io.Serializable, Cloneable, Comparable<clientCheckStop_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clientCheckStop_args");

    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clientCheckStop_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clientCheckStop_argsTupleSchemeFactory());
    }

    public String ip; // required
    public String authentication; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP((short)1, "ip"),
      AUTHENTICATION((short)2, "authentication");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP
            return IP;
          case 2: // AUTHENTICATION
            return AUTHENTICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clientCheckStop_args.class, metaDataMap);
    }

    public clientCheckStop_args() {
    }

    public clientCheckStop_args(
      String ip,
      String authentication)
    {
      this();
      this.ip = ip;
      this.authentication = authentication;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clientCheckStop_args(clientCheckStop_args other) {
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
      if (other.isSetAuthentication()) {
        this.authentication = other.authentication;
      }
    }

    public clientCheckStop_args deepCopy() {
      return new clientCheckStop_args(this);
    }

    @Override
    public void clear() {
      this.ip = null;
      this.authentication = null;
    }

    public String getIp() {
      return this.ip;
    }

    public clientCheckStop_args setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public String getAuthentication() {
      return this.authentication;
    }

    public clientCheckStop_args setAuthentication(String authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((String)value);
        }
        break;

      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IP:
        return getIp();

      case AUTHENTICATION:
        return getAuthentication();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IP:
        return isSetIp();
      case AUTHENTICATION:
        return isSetAuthentication();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clientCheckStop_args)
        return this.equals((clientCheckStop_args)that);
      return false;
    }

    public boolean equals(clientCheckStop_args that) {
      if (that == null)
        return false;

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ip = true && (isSetIp());
      list.add(present_ip);
      if (present_ip)
        list.add(ip);

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      return list.hashCode();
    }

    @Override
    public int compareTo(clientCheckStop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clientCheckStop_args(");
      boolean first = true;

      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clientCheckStop_argsStandardSchemeFactory implements SchemeFactory {
      public clientCheckStop_argsStandardScheme getScheme() {
        return new clientCheckStop_argsStandardScheme();
      }
    }

    private static class clientCheckStop_argsStandardScheme extends StandardScheme<clientCheckStop_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clientCheckStop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authentication = iprot.readString();
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clientCheckStop_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          oprot.writeString(struct.authentication);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clientCheckStop_argsTupleSchemeFactory implements SchemeFactory {
      public clientCheckStop_argsTupleScheme getScheme() {
        return new clientCheckStop_argsTupleScheme();
      }
    }

    private static class clientCheckStop_argsTupleScheme extends TupleScheme<clientCheckStop_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clientCheckStop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIp()) {
          optionals.set(0);
        }
        if (struct.isSetAuthentication()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
        if (struct.isSetAuthentication()) {
          oprot.writeString(struct.authentication);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clientCheckStop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authentication = iprot.readString();
          struct.setAuthenticationIsSet(true);
        }
      }
    }

  }

  public static class clientCheckStop_result implements org.apache.thrift.TBase<clientCheckStop_result, clientCheckStop_result._Fields>, java.io.Serializable, Cloneable, Comparable<clientCheckStop_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clientCheckStop_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clientCheckStop_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clientCheckStop_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clientCheckStop_result.class, metaDataMap);
    }

    public clientCheckStop_result() {
    }

    public clientCheckStop_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clientCheckStop_result(clientCheckStop_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public clientCheckStop_result deepCopy() {
      return new clientCheckStop_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public clientCheckStop_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clientCheckStop_result)
        return this.equals((clientCheckStop_result)that);
      return false;
    }

    public boolean equals(clientCheckStop_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(clientCheckStop_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clientCheckStop_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clientCheckStop_resultStandardSchemeFactory implements SchemeFactory {
      public clientCheckStop_resultStandardScheme getScheme() {
        return new clientCheckStop_resultStandardScheme();
      }
    }

    private static class clientCheckStop_resultStandardScheme extends StandardScheme<clientCheckStop_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clientCheckStop_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clientCheckStop_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clientCheckStop_resultTupleSchemeFactory implements SchemeFactory {
      public clientCheckStop_resultTupleScheme getScheme() {
        return new clientCheckStop_resultTupleScheme();
      }
    }

    private static class clientCheckStop_resultTupleScheme extends TupleScheme<clientCheckStop_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clientCheckStop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clientCheckStop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class clientSetLog_args implements org.apache.thrift.TBase<clientSetLog_args, clientSetLog_args._Fields>, java.io.Serializable, Cloneable, Comparable<clientSetLog_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clientSetLog_args");

    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("log", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clientSetLog_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clientSetLog_argsTupleSchemeFactory());
    }

    public String ip; // required
    public String log; // required
    public String authentication; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IP((short)1, "ip"),
      LOG((short)2, "log"),
      AUTHENTICATION((short)3, "authentication");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IP
            return IP;
          case 2: // LOG
            return LOG;
          case 3: // AUTHENTICATION
            return AUTHENTICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOG, new org.apache.thrift.meta_data.FieldMetaData("log", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clientSetLog_args.class, metaDataMap);
    }

    public clientSetLog_args() {
    }

    public clientSetLog_args(
      String ip,
      String log,
      String authentication)
    {
      this();
      this.ip = ip;
      this.log = log;
      this.authentication = authentication;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clientSetLog_args(clientSetLog_args other) {
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
      if (other.isSetLog()) {
        this.log = other.log;
      }
      if (other.isSetAuthentication()) {
        this.authentication = other.authentication;
      }
    }

    public clientSetLog_args deepCopy() {
      return new clientSetLog_args(this);
    }

    @Override
    public void clear() {
      this.ip = null;
      this.log = null;
      this.authentication = null;
    }

    public String getIp() {
      return this.ip;
    }

    public clientSetLog_args setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public String getLog() {
      return this.log;
    }

    public clientSetLog_args setLog(String log) {
      this.log = log;
      return this;
    }

    public void unsetLog() {
      this.log = null;
    }

    /** Returns true if field log is set (has been assigned a value) and false otherwise */
    public boolean isSetLog() {
      return this.log != null;
    }

    public void setLogIsSet(boolean value) {
      if (!value) {
        this.log = null;
      }
    }

    public String getAuthentication() {
      return this.authentication;
    }

    public clientSetLog_args setAuthentication(String authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((String)value);
        }
        break;

      case LOG:
        if (value == null) {
          unsetLog();
        } else {
          setLog((String)value);
        }
        break;

      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IP:
        return getIp();

      case LOG:
        return getLog();

      case AUTHENTICATION:
        return getAuthentication();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IP:
        return isSetIp();
      case LOG:
        return isSetLog();
      case AUTHENTICATION:
        return isSetAuthentication();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clientSetLog_args)
        return this.equals((clientSetLog_args)that);
      return false;
    }

    public boolean equals(clientSetLog_args that) {
      if (that == null)
        return false;

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      boolean this_present_log = true && this.isSetLog();
      boolean that_present_log = true && that.isSetLog();
      if (this_present_log || that_present_log) {
        if (!(this_present_log && that_present_log))
          return false;
        if (!this.log.equals(that.log))
          return false;
      }

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ip = true && (isSetIp());
      list.add(present_ip);
      if (present_ip)
        list.add(ip);

      boolean present_log = true && (isSetLog());
      list.add(present_log);
      if (present_log)
        list.add(log);

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      return list.hashCode();
    }

    @Override
    public int compareTo(clientSetLog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLog()).compareTo(other.isSetLog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log, other.log);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clientSetLog_args(");
      boolean first = true;

      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("log:");
      if (this.log == null) {
        sb.append("null");
      } else {
        sb.append(this.log);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clientSetLog_argsStandardSchemeFactory implements SchemeFactory {
      public clientSetLog_argsStandardScheme getScheme() {
        return new clientSetLog_argsStandardScheme();
      }
    }

    private static class clientSetLog_argsStandardScheme extends StandardScheme<clientSetLog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clientSetLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.log = iprot.readString();
                struct.setLogIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authentication = iprot.readString();
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clientSetLog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        if (struct.log != null) {
          oprot.writeFieldBegin(LOG_FIELD_DESC);
          oprot.writeString(struct.log);
          oprot.writeFieldEnd();
        }
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          oprot.writeString(struct.authentication);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clientSetLog_argsTupleSchemeFactory implements SchemeFactory {
      public clientSetLog_argsTupleScheme getScheme() {
        return new clientSetLog_argsTupleScheme();
      }
    }

    private static class clientSetLog_argsTupleScheme extends TupleScheme<clientSetLog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clientSetLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIp()) {
          optionals.set(0);
        }
        if (struct.isSetLog()) {
          optionals.set(1);
        }
        if (struct.isSetAuthentication()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
        if (struct.isSetLog()) {
          oprot.writeString(struct.log);
        }
        if (struct.isSetAuthentication()) {
          oprot.writeString(struct.authentication);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clientSetLog_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.log = iprot.readString();
          struct.setLogIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authentication = iprot.readString();
          struct.setAuthenticationIsSet(true);
        }
      }
    }

  }

  public static class clientSetLog_result implements org.apache.thrift.TBase<clientSetLog_result, clientSetLog_result._Fields>, java.io.Serializable, Cloneable, Comparable<clientSetLog_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clientSetLog_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clientSetLog_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clientSetLog_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clientSetLog_result.class, metaDataMap);
    }

    public clientSetLog_result() {
    }

    public clientSetLog_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clientSetLog_result(clientSetLog_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public clientSetLog_result deepCopy() {
      return new clientSetLog_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public clientSetLog_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clientSetLog_result)
        return this.equals((clientSetLog_result)that);
      return false;
    }

    public boolean equals(clientSetLog_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(clientSetLog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clientSetLog_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clientSetLog_resultStandardSchemeFactory implements SchemeFactory {
      public clientSetLog_resultStandardScheme getScheme() {
        return new clientSetLog_resultStandardScheme();
      }
    }

    private static class clientSetLog_resultStandardScheme extends StandardScheme<clientSetLog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clientSetLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clientSetLog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clientSetLog_resultTupleSchemeFactory implements SchemeFactory {
      public clientSetLog_resultTupleScheme getScheme() {
        return new clientSetLog_resultTupleScheme();
      }
    }

    private static class clientSetLog_resultTupleScheme extends TupleScheme<clientSetLog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clientSetLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clientSetLog_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class gettingParameterSearch_args implements org.apache.thrift.TBase<gettingParameterSearch_args, gettingParameterSearch_args._Fields>, java.io.Serializable, Cloneable, Comparable<gettingParameterSearch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gettingParameterSearch_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gettingParameterSearch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gettingParameterSearch_argsTupleSchemeFactory());
    }

    public String authentication; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gettingParameterSearch_args.class, metaDataMap);
    }

    public gettingParameterSearch_args() {
    }

    public gettingParameterSearch_args(
      String authentication)
    {
      this();
      this.authentication = authentication;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gettingParameterSearch_args(gettingParameterSearch_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = other.authentication;
      }
    }

    public gettingParameterSearch_args deepCopy() {
      return new gettingParameterSearch_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
    }

    public String getAuthentication() {
      return this.authentication;
    }

    public gettingParameterSearch_args setAuthentication(String authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gettingParameterSearch_args)
        return this.equals((gettingParameterSearch_args)that);
      return false;
    }

    public boolean equals(gettingParameterSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      return list.hashCode();
    }

    @Override
    public int compareTo(gettingParameterSearch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gettingParameterSearch_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gettingParameterSearch_argsStandardSchemeFactory implements SchemeFactory {
      public gettingParameterSearch_argsStandardScheme getScheme() {
        return new gettingParameterSearch_argsStandardScheme();
      }
    }

    private static class gettingParameterSearch_argsStandardScheme extends StandardScheme<gettingParameterSearch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gettingParameterSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authentication = iprot.readString();
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gettingParameterSearch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          oprot.writeString(struct.authentication);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gettingParameterSearch_argsTupleSchemeFactory implements SchemeFactory {
      public gettingParameterSearch_argsTupleScheme getScheme() {
        return new gettingParameterSearch_argsTupleScheme();
      }
    }

    private static class gettingParameterSearch_argsTupleScheme extends TupleScheme<gettingParameterSearch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gettingParameterSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthentication()) {
          oprot.writeString(struct.authentication);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gettingParameterSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authentication = iprot.readString();
          struct.setAuthenticationIsSet(true);
        }
      }
    }

  }

  public static class gettingParameterSearch_result implements org.apache.thrift.TBase<gettingParameterSearch_result, gettingParameterSearch_result._Fields>, java.io.Serializable, Cloneable, Comparable<gettingParameterSearch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gettingParameterSearch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gettingParameterSearch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gettingParameterSearch_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP          , "Map")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gettingParameterSearch_result.class, metaDataMap);
    }

    public gettingParameterSearch_result() {
    }

    public gettingParameterSearch_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gettingParameterSearch_result(gettingParameterSearch_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public gettingParameterSearch_result deepCopy() {
      return new gettingParameterSearch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public gettingParameterSearch_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gettingParameterSearch_result)
        return this.equals((gettingParameterSearch_result)that);
      return false;
    }

    public boolean equals(gettingParameterSearch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(gettingParameterSearch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gettingParameterSearch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gettingParameterSearch_resultStandardSchemeFactory implements SchemeFactory {
      public gettingParameterSearch_resultStandardScheme getScheme() {
        return new gettingParameterSearch_resultStandardScheme();
      }
    }

    private static class gettingParameterSearch_resultStandardScheme extends StandardScheme<gettingParameterSearch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gettingParameterSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map0.size);
                  String _key1;
                  String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.success.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gettingParameterSearch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter4 : struct.success.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gettingParameterSearch_resultTupleSchemeFactory implements SchemeFactory {
      public gettingParameterSearch_resultTupleScheme getScheme() {
        return new gettingParameterSearch_resultTupleScheme();
      }
    }

    private static class gettingParameterSearch_resultTupleScheme extends TupleScheme<gettingParameterSearch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gettingParameterSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter5 : struct.success.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gettingParameterSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map6.size);
            String _key7;
            String _val8;
            for (int _i9 = 0; _i9 < _map6.size; ++_i9)
            {
              _key7 = iprot.readString();
              _val8 = iprot.readString();
              struct.success.put(_key7, _val8);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class settingParameterSearch_args implements org.apache.thrift.TBase<settingParameterSearch_args, settingParameterSearch_args._Fields>, java.io.Serializable, Cloneable, Comparable<settingParameterSearch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("settingParameterSearch_args");

    private static final org.apache.thrift.protocol.TField MAP_PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("mapParameters", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new settingParameterSearch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new settingParameterSearch_argsTupleSchemeFactory());
    }

    public Map<String,String> mapParameters; // required
    public String authentication; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAP_PARAMETERS((short)1, "mapParameters"),
      AUTHENTICATION((short)2, "authentication");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAP_PARAMETERS
            return MAP_PARAMETERS;
          case 2: // AUTHENTICATION
            return AUTHENTICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAP_PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("mapParameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP          , "Map")));
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(settingParameterSearch_args.class, metaDataMap);
    }

    public settingParameterSearch_args() {
    }

    public settingParameterSearch_args(
      Map<String,String> mapParameters,
      String authentication)
    {
      this();
      this.mapParameters = mapParameters;
      this.authentication = authentication;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public settingParameterSearch_args(settingParameterSearch_args other) {
      if (other.isSetMapParameters()) {
        this.mapParameters = other.mapParameters;
      }
      if (other.isSetAuthentication()) {
        this.authentication = other.authentication;
      }
    }

    public settingParameterSearch_args deepCopy() {
      return new settingParameterSearch_args(this);
    }

    @Override
    public void clear() {
      this.mapParameters = null;
      this.authentication = null;
    }

    public int getMapParametersSize() {
      return (this.mapParameters == null) ? 0 : this.mapParameters.size();
    }

    public void putToMapParameters(String key, String val) {
      if (this.mapParameters == null) {
        this.mapParameters = new HashMap<String,String>();
      }
      this.mapParameters.put(key, val);
    }

    public Map<String,String> getMapParameters() {
      return this.mapParameters;
    }

    public settingParameterSearch_args setMapParameters(Map<String,String> mapParameters) {
      this.mapParameters = mapParameters;
      return this;
    }

    public void unsetMapParameters() {
      this.mapParameters = null;
    }

    /** Returns true if field mapParameters is set (has been assigned a value) and false otherwise */
    public boolean isSetMapParameters() {
      return this.mapParameters != null;
    }

    public void setMapParametersIsSet(boolean value) {
      if (!value) {
        this.mapParameters = null;
      }
    }

    public String getAuthentication() {
      return this.authentication;
    }

    public settingParameterSearch_args setAuthentication(String authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAP_PARAMETERS:
        if (value == null) {
          unsetMapParameters();
        } else {
          setMapParameters((Map<String,String>)value);
        }
        break;

      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAP_PARAMETERS:
        return getMapParameters();

      case AUTHENTICATION:
        return getAuthentication();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAP_PARAMETERS:
        return isSetMapParameters();
      case AUTHENTICATION:
        return isSetAuthentication();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof settingParameterSearch_args)
        return this.equals((settingParameterSearch_args)that);
      return false;
    }

    public boolean equals(settingParameterSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_mapParameters = true && this.isSetMapParameters();
      boolean that_present_mapParameters = true && that.isSetMapParameters();
      if (this_present_mapParameters || that_present_mapParameters) {
        if (!(this_present_mapParameters && that_present_mapParameters))
          return false;
        if (!this.mapParameters.equals(that.mapParameters))
          return false;
      }

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mapParameters = true && (isSetMapParameters());
      list.add(present_mapParameters);
      if (present_mapParameters)
        list.add(mapParameters);

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      return list.hashCode();
    }

    @Override
    public int compareTo(settingParameterSearch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMapParameters()).compareTo(other.isSetMapParameters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMapParameters()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapParameters, other.mapParameters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("settingParameterSearch_args(");
      boolean first = true;

      sb.append("mapParameters:");
      if (this.mapParameters == null) {
        sb.append("null");
      } else {
        sb.append(this.mapParameters);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class settingParameterSearch_argsStandardSchemeFactory implements SchemeFactory {
      public settingParameterSearch_argsStandardScheme getScheme() {
        return new settingParameterSearch_argsStandardScheme();
      }
    }

    private static class settingParameterSearch_argsStandardScheme extends StandardScheme<settingParameterSearch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, settingParameterSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAP_PARAMETERS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                  struct.mapParameters = new HashMap<String,String>(2*_map10.size);
                  String _key11;
                  String _val12;
                  for (int _i13 = 0; _i13 < _map10.size; ++_i13)
                  {
                    _key11 = iprot.readString();
                    _val12 = iprot.readString();
                    struct.mapParameters.put(_key11, _val12);
                  }
                  iprot.readMapEnd();
                }
                struct.setMapParametersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authentication = iprot.readString();
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, settingParameterSearch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mapParameters != null) {
          oprot.writeFieldBegin(MAP_PARAMETERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mapParameters.size()));
            for (Map.Entry<String, String> _iter14 : struct.mapParameters.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          oprot.writeString(struct.authentication);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class settingParameterSearch_argsTupleSchemeFactory implements SchemeFactory {
      public settingParameterSearch_argsTupleScheme getScheme() {
        return new settingParameterSearch_argsTupleScheme();
      }
    }

    private static class settingParameterSearch_argsTupleScheme extends TupleScheme<settingParameterSearch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, settingParameterSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMapParameters()) {
          optionals.set(0);
        }
        if (struct.isSetAuthentication()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMapParameters()) {
          {
            oprot.writeI32(struct.mapParameters.size());
            for (Map.Entry<String, String> _iter15 : struct.mapParameters.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              oprot.writeString(_iter15.getValue());
            }
          }
        }
        if (struct.isSetAuthentication()) {
          oprot.writeString(struct.authentication);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, settingParameterSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mapParameters = new HashMap<String,String>(2*_map16.size);
            String _key17;
            String _val18;
            for (int _i19 = 0; _i19 < _map16.size; ++_i19)
            {
              _key17 = iprot.readString();
              _val18 = iprot.readString();
              struct.mapParameters.put(_key17, _val18);
            }
          }
          struct.setMapParametersIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authentication = iprot.readString();
          struct.setAuthenticationIsSet(true);
        }
      }
    }

  }

  public static class settingParameterSearch_result implements org.apache.thrift.TBase<settingParameterSearch_result, settingParameterSearch_result._Fields>, java.io.Serializable, Cloneable, Comparable<settingParameterSearch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("settingParameterSearch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new settingParameterSearch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new settingParameterSearch_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(settingParameterSearch_result.class, metaDataMap);
    }

    public settingParameterSearch_result() {
    }

    public settingParameterSearch_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public settingParameterSearch_result(settingParameterSearch_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public settingParameterSearch_result deepCopy() {
      return new settingParameterSearch_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public settingParameterSearch_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof settingParameterSearch_result)
        return this.equals((settingParameterSearch_result)that);
      return false;
    }

    public boolean equals(settingParameterSearch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(settingParameterSearch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("settingParameterSearch_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class settingParameterSearch_resultStandardSchemeFactory implements SchemeFactory {
      public settingParameterSearch_resultStandardScheme getScheme() {
        return new settingParameterSearch_resultStandardScheme();
      }
    }

    private static class settingParameterSearch_resultStandardScheme extends StandardScheme<settingParameterSearch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, settingParameterSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, settingParameterSearch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class settingParameterSearch_resultTupleSchemeFactory implements SchemeFactory {
      public settingParameterSearch_resultTupleScheme getScheme() {
        return new settingParameterSearch_resultTupleScheme();
      }
    }

    private static class settingParameterSearch_resultTupleScheme extends TupleScheme<settingParameterSearch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, settingParameterSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, settingParameterSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class gettingParameterViewSuggest_args implements org.apache.thrift.TBase<gettingParameterViewSuggest_args, gettingParameterViewSuggest_args._Fields>, java.io.Serializable, Cloneable, Comparable<gettingParameterViewSuggest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gettingParameterViewSuggest_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gettingParameterViewSuggest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gettingParameterViewSuggest_argsTupleSchemeFactory());
    }

    public String authentication; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gettingParameterViewSuggest_args.class, metaDataMap);
    }

    public gettingParameterViewSuggest_args() {
    }

    public gettingParameterViewSuggest_args(
      String authentication)
    {
      this();
      this.authentication = authentication;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gettingParameterViewSuggest_args(gettingParameterViewSuggest_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = other.authentication;
      }
    }

    public gettingParameterViewSuggest_args deepCopy() {
      return new gettingParameterViewSuggest_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
    }

    public String getAuthentication() {
      return this.authentication;
    }

    public gettingParameterViewSuggest_args setAuthentication(String authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gettingParameterViewSuggest_args)
        return this.equals((gettingParameterViewSuggest_args)that);
      return false;
    }

    public boolean equals(gettingParameterViewSuggest_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      return list.hashCode();
    }

    @Override
    public int compareTo(gettingParameterViewSuggest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gettingParameterViewSuggest_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gettingParameterViewSuggest_argsStandardSchemeFactory implements SchemeFactory {
      public gettingParameterViewSuggest_argsStandardScheme getScheme() {
        return new gettingParameterViewSuggest_argsStandardScheme();
      }
    }

    private static class gettingParameterViewSuggest_argsStandardScheme extends StandardScheme<gettingParameterViewSuggest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gettingParameterViewSuggest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authentication = iprot.readString();
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gettingParameterViewSuggest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          oprot.writeString(struct.authentication);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gettingParameterViewSuggest_argsTupleSchemeFactory implements SchemeFactory {
      public gettingParameterViewSuggest_argsTupleScheme getScheme() {
        return new gettingParameterViewSuggest_argsTupleScheme();
      }
    }

    private static class gettingParameterViewSuggest_argsTupleScheme extends TupleScheme<gettingParameterViewSuggest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gettingParameterViewSuggest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthentication()) {
          oprot.writeString(struct.authentication);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gettingParameterViewSuggest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authentication = iprot.readString();
          struct.setAuthenticationIsSet(true);
        }
      }
    }

  }

  public static class gettingParameterViewSuggest_result implements org.apache.thrift.TBase<gettingParameterViewSuggest_result, gettingParameterViewSuggest_result._Fields>, java.io.Serializable, Cloneable, Comparable<gettingParameterViewSuggest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gettingParameterViewSuggest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gettingParameterViewSuggest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gettingParameterViewSuggest_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP          , "Map")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gettingParameterViewSuggest_result.class, metaDataMap);
    }

    public gettingParameterViewSuggest_result() {
    }

    public gettingParameterViewSuggest_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gettingParameterViewSuggest_result(gettingParameterViewSuggest_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public gettingParameterViewSuggest_result deepCopy() {
      return new gettingParameterViewSuggest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public gettingParameterViewSuggest_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gettingParameterViewSuggest_result)
        return this.equals((gettingParameterViewSuggest_result)that);
      return false;
    }

    public boolean equals(gettingParameterViewSuggest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(gettingParameterViewSuggest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gettingParameterViewSuggest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gettingParameterViewSuggest_resultStandardSchemeFactory implements SchemeFactory {
      public gettingParameterViewSuggest_resultStandardScheme getScheme() {
        return new gettingParameterViewSuggest_resultStandardScheme();
      }
    }

    private static class gettingParameterViewSuggest_resultStandardScheme extends StandardScheme<gettingParameterViewSuggest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gettingParameterViewSuggest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map20.size);
                  String _key21;
                  String _val22;
                  for (int _i23 = 0; _i23 < _map20.size; ++_i23)
                  {
                    _key21 = iprot.readString();
                    _val22 = iprot.readString();
                    struct.success.put(_key21, _val22);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gettingParameterViewSuggest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter24 : struct.success.entrySet())
            {
              oprot.writeString(_iter24.getKey());
              oprot.writeString(_iter24.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gettingParameterViewSuggest_resultTupleSchemeFactory implements SchemeFactory {
      public gettingParameterViewSuggest_resultTupleScheme getScheme() {
        return new gettingParameterViewSuggest_resultTupleScheme();
      }
    }

    private static class gettingParameterViewSuggest_resultTupleScheme extends TupleScheme<gettingParameterViewSuggest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gettingParameterViewSuggest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter25 : struct.success.entrySet())
            {
              oprot.writeString(_iter25.getKey());
              oprot.writeString(_iter25.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gettingParameterViewSuggest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map26.size);
            String _key27;
            String _val28;
            for (int _i29 = 0; _i29 < _map26.size; ++_i29)
            {
              _key27 = iprot.readString();
              _val28 = iprot.readString();
              struct.success.put(_key27, _val28);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class settingParameterViewSuggest_args implements org.apache.thrift.TBase<settingParameterViewSuggest_args, settingParameterViewSuggest_args._Fields>, java.io.Serializable, Cloneable, Comparable<settingParameterViewSuggest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("settingParameterViewSuggest_args");

    private static final org.apache.thrift.protocol.TField MAP_PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("mapParameters", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new settingParameterViewSuggest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new settingParameterViewSuggest_argsTupleSchemeFactory());
    }

    public Map<String,String> mapParameters; // required
    public String authentication; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAP_PARAMETERS((short)1, "mapParameters"),
      AUTHENTICATION((short)2, "authentication");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAP_PARAMETERS
            return MAP_PARAMETERS;
          case 2: // AUTHENTICATION
            return AUTHENTICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAP_PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("mapParameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP          , "Map")));
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(settingParameterViewSuggest_args.class, metaDataMap);
    }

    public settingParameterViewSuggest_args() {
    }

    public settingParameterViewSuggest_args(
      Map<String,String> mapParameters,
      String authentication)
    {
      this();
      this.mapParameters = mapParameters;
      this.authentication = authentication;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public settingParameterViewSuggest_args(settingParameterViewSuggest_args other) {
      if (other.isSetMapParameters()) {
        this.mapParameters = other.mapParameters;
      }
      if (other.isSetAuthentication()) {
        this.authentication = other.authentication;
      }
    }

    public settingParameterViewSuggest_args deepCopy() {
      return new settingParameterViewSuggest_args(this);
    }

    @Override
    public void clear() {
      this.mapParameters = null;
      this.authentication = null;
    }

    public int getMapParametersSize() {
      return (this.mapParameters == null) ? 0 : this.mapParameters.size();
    }

    public void putToMapParameters(String key, String val) {
      if (this.mapParameters == null) {
        this.mapParameters = new HashMap<String,String>();
      }
      this.mapParameters.put(key, val);
    }

    public Map<String,String> getMapParameters() {
      return this.mapParameters;
    }

    public settingParameterViewSuggest_args setMapParameters(Map<String,String> mapParameters) {
      this.mapParameters = mapParameters;
      return this;
    }

    public void unsetMapParameters() {
      this.mapParameters = null;
    }

    /** Returns true if field mapParameters is set (has been assigned a value) and false otherwise */
    public boolean isSetMapParameters() {
      return this.mapParameters != null;
    }

    public void setMapParametersIsSet(boolean value) {
      if (!value) {
        this.mapParameters = null;
      }
    }

    public String getAuthentication() {
      return this.authentication;
    }

    public settingParameterViewSuggest_args setAuthentication(String authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAP_PARAMETERS:
        if (value == null) {
          unsetMapParameters();
        } else {
          setMapParameters((Map<String,String>)value);
        }
        break;

      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAP_PARAMETERS:
        return getMapParameters();

      case AUTHENTICATION:
        return getAuthentication();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAP_PARAMETERS:
        return isSetMapParameters();
      case AUTHENTICATION:
        return isSetAuthentication();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof settingParameterViewSuggest_args)
        return this.equals((settingParameterViewSuggest_args)that);
      return false;
    }

    public boolean equals(settingParameterViewSuggest_args that) {
      if (that == null)
        return false;

      boolean this_present_mapParameters = true && this.isSetMapParameters();
      boolean that_present_mapParameters = true && that.isSetMapParameters();
      if (this_present_mapParameters || that_present_mapParameters) {
        if (!(this_present_mapParameters && that_present_mapParameters))
          return false;
        if (!this.mapParameters.equals(that.mapParameters))
          return false;
      }

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mapParameters = true && (isSetMapParameters());
      list.add(present_mapParameters);
      if (present_mapParameters)
        list.add(mapParameters);

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      return list.hashCode();
    }

    @Override
    public int compareTo(settingParameterViewSuggest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMapParameters()).compareTo(other.isSetMapParameters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMapParameters()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapParameters, other.mapParameters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("settingParameterViewSuggest_args(");
      boolean first = true;

      sb.append("mapParameters:");
      if (this.mapParameters == null) {
        sb.append("null");
      } else {
        sb.append(this.mapParameters);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class settingParameterViewSuggest_argsStandardSchemeFactory implements SchemeFactory {
      public settingParameterViewSuggest_argsStandardScheme getScheme() {
        return new settingParameterViewSuggest_argsStandardScheme();
      }
    }

    private static class settingParameterViewSuggest_argsStandardScheme extends StandardScheme<settingParameterViewSuggest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, settingParameterViewSuggest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAP_PARAMETERS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map30 = iprot.readMapBegin();
                  struct.mapParameters = new HashMap<String,String>(2*_map30.size);
                  String _key31;
                  String _val32;
                  for (int _i33 = 0; _i33 < _map30.size; ++_i33)
                  {
                    _key31 = iprot.readString();
                    _val32 = iprot.readString();
                    struct.mapParameters.put(_key31, _val32);
                  }
                  iprot.readMapEnd();
                }
                struct.setMapParametersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authentication = iprot.readString();
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, settingParameterViewSuggest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mapParameters != null) {
          oprot.writeFieldBegin(MAP_PARAMETERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mapParameters.size()));
            for (Map.Entry<String, String> _iter34 : struct.mapParameters.entrySet())
            {
              oprot.writeString(_iter34.getKey());
              oprot.writeString(_iter34.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          oprot.writeString(struct.authentication);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class settingParameterViewSuggest_argsTupleSchemeFactory implements SchemeFactory {
      public settingParameterViewSuggest_argsTupleScheme getScheme() {
        return new settingParameterViewSuggest_argsTupleScheme();
      }
    }

    private static class settingParameterViewSuggest_argsTupleScheme extends TupleScheme<settingParameterViewSuggest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, settingParameterViewSuggest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMapParameters()) {
          optionals.set(0);
        }
        if (struct.isSetAuthentication()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMapParameters()) {
          {
            oprot.writeI32(struct.mapParameters.size());
            for (Map.Entry<String, String> _iter35 : struct.mapParameters.entrySet())
            {
              oprot.writeString(_iter35.getKey());
              oprot.writeString(_iter35.getValue());
            }
          }
        }
        if (struct.isSetAuthentication()) {
          oprot.writeString(struct.authentication);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, settingParameterViewSuggest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map36 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mapParameters = new HashMap<String,String>(2*_map36.size);
            String _key37;
            String _val38;
            for (int _i39 = 0; _i39 < _map36.size; ++_i39)
            {
              _key37 = iprot.readString();
              _val38 = iprot.readString();
              struct.mapParameters.put(_key37, _val38);
            }
          }
          struct.setMapParametersIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authentication = iprot.readString();
          struct.setAuthenticationIsSet(true);
        }
      }
    }

  }

  public static class settingParameterViewSuggest_result implements org.apache.thrift.TBase<settingParameterViewSuggest_result, settingParameterViewSuggest_result._Fields>, java.io.Serializable, Cloneable, Comparable<settingParameterViewSuggest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("settingParameterViewSuggest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new settingParameterViewSuggest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new settingParameterViewSuggest_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(settingParameterViewSuggest_result.class, metaDataMap);
    }

    public settingParameterViewSuggest_result() {
    }

    public settingParameterViewSuggest_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public settingParameterViewSuggest_result(settingParameterViewSuggest_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public settingParameterViewSuggest_result deepCopy() {
      return new settingParameterViewSuggest_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public settingParameterViewSuggest_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof settingParameterViewSuggest_result)
        return this.equals((settingParameterViewSuggest_result)that);
      return false;
    }

    public boolean equals(settingParameterViewSuggest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(settingParameterViewSuggest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("settingParameterViewSuggest_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class settingParameterViewSuggest_resultStandardSchemeFactory implements SchemeFactory {
      public settingParameterViewSuggest_resultStandardScheme getScheme() {
        return new settingParameterViewSuggest_resultStandardScheme();
      }
    }

    private static class settingParameterViewSuggest_resultStandardScheme extends StandardScheme<settingParameterViewSuggest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, settingParameterViewSuggest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, settingParameterViewSuggest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class settingParameterViewSuggest_resultTupleSchemeFactory implements SchemeFactory {
      public settingParameterViewSuggest_resultTupleScheme getScheme() {
        return new settingParameterViewSuggest_resultTupleScheme();
      }
    }

    private static class settingParameterViewSuggest_resultTupleScheme extends TupleScheme<settingParameterViewSuggest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, settingParameterViewSuggest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, settingParameterViewSuggest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class gettingParameterClickSuggest_args implements org.apache.thrift.TBase<gettingParameterClickSuggest_args, gettingParameterClickSuggest_args._Fields>, java.io.Serializable, Cloneable, Comparable<gettingParameterClickSuggest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gettingParameterClickSuggest_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gettingParameterClickSuggest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gettingParameterClickSuggest_argsTupleSchemeFactory());
    }

    public String authentication; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gettingParameterClickSuggest_args.class, metaDataMap);
    }

    public gettingParameterClickSuggest_args() {
    }

    public gettingParameterClickSuggest_args(
      String authentication)
    {
      this();
      this.authentication = authentication;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gettingParameterClickSuggest_args(gettingParameterClickSuggest_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = other.authentication;
      }
    }

    public gettingParameterClickSuggest_args deepCopy() {
      return new gettingParameterClickSuggest_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
    }

    public String getAuthentication() {
      return this.authentication;
    }

    public gettingParameterClickSuggest_args setAuthentication(String authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gettingParameterClickSuggest_args)
        return this.equals((gettingParameterClickSuggest_args)that);
      return false;
    }

    public boolean equals(gettingParameterClickSuggest_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      return list.hashCode();
    }

    @Override
    public int compareTo(gettingParameterClickSuggest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gettingParameterClickSuggest_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gettingParameterClickSuggest_argsStandardSchemeFactory implements SchemeFactory {
      public gettingParameterClickSuggest_argsStandardScheme getScheme() {
        return new gettingParameterClickSuggest_argsStandardScheme();
      }
    }

    private static class gettingParameterClickSuggest_argsStandardScheme extends StandardScheme<gettingParameterClickSuggest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gettingParameterClickSuggest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authentication = iprot.readString();
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gettingParameterClickSuggest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          oprot.writeString(struct.authentication);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gettingParameterClickSuggest_argsTupleSchemeFactory implements SchemeFactory {
      public gettingParameterClickSuggest_argsTupleScheme getScheme() {
        return new gettingParameterClickSuggest_argsTupleScheme();
      }
    }

    private static class gettingParameterClickSuggest_argsTupleScheme extends TupleScheme<gettingParameterClickSuggest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gettingParameterClickSuggest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthentication()) {
          oprot.writeString(struct.authentication);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gettingParameterClickSuggest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authentication = iprot.readString();
          struct.setAuthenticationIsSet(true);
        }
      }
    }

  }

  public static class gettingParameterClickSuggest_result implements org.apache.thrift.TBase<gettingParameterClickSuggest_result, gettingParameterClickSuggest_result._Fields>, java.io.Serializable, Cloneable, Comparable<gettingParameterClickSuggest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gettingParameterClickSuggest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gettingParameterClickSuggest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gettingParameterClickSuggest_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP          , "Map")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gettingParameterClickSuggest_result.class, metaDataMap);
    }

    public gettingParameterClickSuggest_result() {
    }

    public gettingParameterClickSuggest_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gettingParameterClickSuggest_result(gettingParameterClickSuggest_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public gettingParameterClickSuggest_result deepCopy() {
      return new gettingParameterClickSuggest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public gettingParameterClickSuggest_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gettingParameterClickSuggest_result)
        return this.equals((gettingParameterClickSuggest_result)that);
      return false;
    }

    public boolean equals(gettingParameterClickSuggest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(gettingParameterClickSuggest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gettingParameterClickSuggest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gettingParameterClickSuggest_resultStandardSchemeFactory implements SchemeFactory {
      public gettingParameterClickSuggest_resultStandardScheme getScheme() {
        return new gettingParameterClickSuggest_resultStandardScheme();
      }
    }

    private static class gettingParameterClickSuggest_resultStandardScheme extends StandardScheme<gettingParameterClickSuggest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gettingParameterClickSuggest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map40.size);
                  String _key41;
                  String _val42;
                  for (int _i43 = 0; _i43 < _map40.size; ++_i43)
                  {
                    _key41 = iprot.readString();
                    _val42 = iprot.readString();
                    struct.success.put(_key41, _val42);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gettingParameterClickSuggest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter44 : struct.success.entrySet())
            {
              oprot.writeString(_iter44.getKey());
              oprot.writeString(_iter44.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gettingParameterClickSuggest_resultTupleSchemeFactory implements SchemeFactory {
      public gettingParameterClickSuggest_resultTupleScheme getScheme() {
        return new gettingParameterClickSuggest_resultTupleScheme();
      }
    }

    private static class gettingParameterClickSuggest_resultTupleScheme extends TupleScheme<gettingParameterClickSuggest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gettingParameterClickSuggest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter45 : struct.success.entrySet())
            {
              oprot.writeString(_iter45.getKey());
              oprot.writeString(_iter45.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gettingParameterClickSuggest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map46 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map46.size);
            String _key47;
            String _val48;
            for (int _i49 = 0; _i49 < _map46.size; ++_i49)
            {
              _key47 = iprot.readString();
              _val48 = iprot.readString();
              struct.success.put(_key47, _val48);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class settingParameterClickSuggest_args implements org.apache.thrift.TBase<settingParameterClickSuggest_args, settingParameterClickSuggest_args._Fields>, java.io.Serializable, Cloneable, Comparable<settingParameterClickSuggest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("settingParameterClickSuggest_args");

    private static final org.apache.thrift.protocol.TField MAP_PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("mapParameters", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new settingParameterClickSuggest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new settingParameterClickSuggest_argsTupleSchemeFactory());
    }

    public Map<String,String> mapParameters; // required
    public String authentication; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAP_PARAMETERS((short)1, "mapParameters"),
      AUTHENTICATION((short)2, "authentication");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAP_PARAMETERS
            return MAP_PARAMETERS;
          case 2: // AUTHENTICATION
            return AUTHENTICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAP_PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("mapParameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP          , "Map")));
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(settingParameterClickSuggest_args.class, metaDataMap);
    }

    public settingParameterClickSuggest_args() {
    }

    public settingParameterClickSuggest_args(
      Map<String,String> mapParameters,
      String authentication)
    {
      this();
      this.mapParameters = mapParameters;
      this.authentication = authentication;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public settingParameterClickSuggest_args(settingParameterClickSuggest_args other) {
      if (other.isSetMapParameters()) {
        this.mapParameters = other.mapParameters;
      }
      if (other.isSetAuthentication()) {
        this.authentication = other.authentication;
      }
    }

    public settingParameterClickSuggest_args deepCopy() {
      return new settingParameterClickSuggest_args(this);
    }

    @Override
    public void clear() {
      this.mapParameters = null;
      this.authentication = null;
    }

    public int getMapParametersSize() {
      return (this.mapParameters == null) ? 0 : this.mapParameters.size();
    }

    public void putToMapParameters(String key, String val) {
      if (this.mapParameters == null) {
        this.mapParameters = new HashMap<String,String>();
      }
      this.mapParameters.put(key, val);
    }

    public Map<String,String> getMapParameters() {
      return this.mapParameters;
    }

    public settingParameterClickSuggest_args setMapParameters(Map<String,String> mapParameters) {
      this.mapParameters = mapParameters;
      return this;
    }

    public void unsetMapParameters() {
      this.mapParameters = null;
    }

    /** Returns true if field mapParameters is set (has been assigned a value) and false otherwise */
    public boolean isSetMapParameters() {
      return this.mapParameters != null;
    }

    public void setMapParametersIsSet(boolean value) {
      if (!value) {
        this.mapParameters = null;
      }
    }

    public String getAuthentication() {
      return this.authentication;
    }

    public settingParameterClickSuggest_args setAuthentication(String authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAP_PARAMETERS:
        if (value == null) {
          unsetMapParameters();
        } else {
          setMapParameters((Map<String,String>)value);
        }
        break;

      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAP_PARAMETERS:
        return getMapParameters();

      case AUTHENTICATION:
        return getAuthentication();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAP_PARAMETERS:
        return isSetMapParameters();
      case AUTHENTICATION:
        return isSetAuthentication();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof settingParameterClickSuggest_args)
        return this.equals((settingParameterClickSuggest_args)that);
      return false;
    }

    public boolean equals(settingParameterClickSuggest_args that) {
      if (that == null)
        return false;

      boolean this_present_mapParameters = true && this.isSetMapParameters();
      boolean that_present_mapParameters = true && that.isSetMapParameters();
      if (this_present_mapParameters || that_present_mapParameters) {
        if (!(this_present_mapParameters && that_present_mapParameters))
          return false;
        if (!this.mapParameters.equals(that.mapParameters))
          return false;
      }

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mapParameters = true && (isSetMapParameters());
      list.add(present_mapParameters);
      if (present_mapParameters)
        list.add(mapParameters);

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      return list.hashCode();
    }

    @Override
    public int compareTo(settingParameterClickSuggest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMapParameters()).compareTo(other.isSetMapParameters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMapParameters()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapParameters, other.mapParameters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("settingParameterClickSuggest_args(");
      boolean first = true;

      sb.append("mapParameters:");
      if (this.mapParameters == null) {
        sb.append("null");
      } else {
        sb.append(this.mapParameters);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class settingParameterClickSuggest_argsStandardSchemeFactory implements SchemeFactory {
      public settingParameterClickSuggest_argsStandardScheme getScheme() {
        return new settingParameterClickSuggest_argsStandardScheme();
      }
    }

    private static class settingParameterClickSuggest_argsStandardScheme extends StandardScheme<settingParameterClickSuggest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, settingParameterClickSuggest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAP_PARAMETERS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                  struct.mapParameters = new HashMap<String,String>(2*_map50.size);
                  String _key51;
                  String _val52;
                  for (int _i53 = 0; _i53 < _map50.size; ++_i53)
                  {
                    _key51 = iprot.readString();
                    _val52 = iprot.readString();
                    struct.mapParameters.put(_key51, _val52);
                  }
                  iprot.readMapEnd();
                }
                struct.setMapParametersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authentication = iprot.readString();
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, settingParameterClickSuggest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mapParameters != null) {
          oprot.writeFieldBegin(MAP_PARAMETERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mapParameters.size()));
            for (Map.Entry<String, String> _iter54 : struct.mapParameters.entrySet())
            {
              oprot.writeString(_iter54.getKey());
              oprot.writeString(_iter54.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          oprot.writeString(struct.authentication);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class settingParameterClickSuggest_argsTupleSchemeFactory implements SchemeFactory {
      public settingParameterClickSuggest_argsTupleScheme getScheme() {
        return new settingParameterClickSuggest_argsTupleScheme();
      }
    }

    private static class settingParameterClickSuggest_argsTupleScheme extends TupleScheme<settingParameterClickSuggest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, settingParameterClickSuggest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMapParameters()) {
          optionals.set(0);
        }
        if (struct.isSetAuthentication()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMapParameters()) {
          {
            oprot.writeI32(struct.mapParameters.size());
            for (Map.Entry<String, String> _iter55 : struct.mapParameters.entrySet())
            {
              oprot.writeString(_iter55.getKey());
              oprot.writeString(_iter55.getValue());
            }
          }
        }
        if (struct.isSetAuthentication()) {
          oprot.writeString(struct.authentication);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, settingParameterClickSuggest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map56 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mapParameters = new HashMap<String,String>(2*_map56.size);
            String _key57;
            String _val58;
            for (int _i59 = 0; _i59 < _map56.size; ++_i59)
            {
              _key57 = iprot.readString();
              _val58 = iprot.readString();
              struct.mapParameters.put(_key57, _val58);
            }
          }
          struct.setMapParametersIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authentication = iprot.readString();
          struct.setAuthenticationIsSet(true);
        }
      }
    }

  }

  public static class settingParameterClickSuggest_result implements org.apache.thrift.TBase<settingParameterClickSuggest_result, settingParameterClickSuggest_result._Fields>, java.io.Serializable, Cloneable, Comparable<settingParameterClickSuggest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("settingParameterClickSuggest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new settingParameterClickSuggest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new settingParameterClickSuggest_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(settingParameterClickSuggest_result.class, metaDataMap);
    }

    public settingParameterClickSuggest_result() {
    }

    public settingParameterClickSuggest_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public settingParameterClickSuggest_result(settingParameterClickSuggest_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public settingParameterClickSuggest_result deepCopy() {
      return new settingParameterClickSuggest_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public settingParameterClickSuggest_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof settingParameterClickSuggest_result)
        return this.equals((settingParameterClickSuggest_result)that);
      return false;
    }

    public boolean equals(settingParameterClickSuggest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(settingParameterClickSuggest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("settingParameterClickSuggest_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class settingParameterClickSuggest_resultStandardSchemeFactory implements SchemeFactory {
      public settingParameterClickSuggest_resultStandardScheme getScheme() {
        return new settingParameterClickSuggest_resultStandardScheme();
      }
    }

    private static class settingParameterClickSuggest_resultStandardScheme extends StandardScheme<settingParameterClickSuggest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, settingParameterClickSuggest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, settingParameterClickSuggest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class settingParameterClickSuggest_resultTupleSchemeFactory implements SchemeFactory {
      public settingParameterClickSuggest_resultTupleScheme getScheme() {
        return new settingParameterClickSuggest_resultTupleScheme();
      }
    }

    private static class settingParameterClickSuggest_resultTupleScheme extends TupleScheme<settingParameterClickSuggest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, settingParameterClickSuggest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, settingParameterClickSuggest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setStatus_args implements org.apache.thrift.TBase<setStatus_args, setStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<setStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setStatus_args");

    private static final org.apache.thrift.protocol.TField IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("ips", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setStatus_argsTupleSchemeFactory());
    }

    public String ips; // required
    public String status; // required
    public String authentication; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IPS((short)1, "ips"),
      STATUS((short)2, "status"),
      AUTHENTICATION((short)3, "authentication");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IPS
            return IPS;
          case 2: // STATUS
            return STATUS;
          case 3: // AUTHENTICATION
            return AUTHENTICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IPS, new org.apache.thrift.meta_data.FieldMetaData("ips", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setStatus_args.class, metaDataMap);
    }

    public setStatus_args() {
    }

    public setStatus_args(
      String ips,
      String status,
      String authentication)
    {
      this();
      this.ips = ips;
      this.status = status;
      this.authentication = authentication;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setStatus_args(setStatus_args other) {
      if (other.isSetIps()) {
        this.ips = other.ips;
      }
      if (other.isSetStatus()) {
        this.status = other.status;
      }
      if (other.isSetAuthentication()) {
        this.authentication = other.authentication;
      }
    }

    public setStatus_args deepCopy() {
      return new setStatus_args(this);
    }

    @Override
    public void clear() {
      this.ips = null;
      this.status = null;
      this.authentication = null;
    }

    public String getIps() {
      return this.ips;
    }

    public setStatus_args setIps(String ips) {
      this.ips = ips;
      return this;
    }

    public void unsetIps() {
      this.ips = null;
    }

    /** Returns true if field ips is set (has been assigned a value) and false otherwise */
    public boolean isSetIps() {
      return this.ips != null;
    }

    public void setIpsIsSet(boolean value) {
      if (!value) {
        this.ips = null;
      }
    }

    public String getStatus() {
      return this.status;
    }

    public setStatus_args setStatus(String status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public String getAuthentication() {
      return this.authentication;
    }

    public setStatus_args setAuthentication(String authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IPS:
        if (value == null) {
          unsetIps();
        } else {
          setIps((String)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((String)value);
        }
        break;

      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IPS:
        return getIps();

      case STATUS:
        return getStatus();

      case AUTHENTICATION:
        return getAuthentication();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IPS:
        return isSetIps();
      case STATUS:
        return isSetStatus();
      case AUTHENTICATION:
        return isSetAuthentication();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setStatus_args)
        return this.equals((setStatus_args)that);
      return false;
    }

    public boolean equals(setStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_ips = true && this.isSetIps();
      boolean that_present_ips = true && that.isSetIps();
      if (this_present_ips || that_present_ips) {
        if (!(this_present_ips && that_present_ips))
          return false;
        if (!this.ips.equals(that.ips))
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ips = true && (isSetIps());
      list.add(present_ips);
      if (present_ips)
        list.add(ips);

      boolean present_status = true && (isSetStatus());
      list.add(present_status);
      if (present_status)
        list.add(status);

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      return list.hashCode();
    }

    @Override
    public int compareTo(setStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIps()).compareTo(other.isSetIps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ips, other.ips);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setStatus_args(");
      boolean first = true;

      sb.append("ips:");
      if (this.ips == null) {
        sb.append("null");
      } else {
        sb.append(this.ips);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setStatus_argsStandardSchemeFactory implements SchemeFactory {
      public setStatus_argsStandardScheme getScheme() {
        return new setStatus_argsStandardScheme();
      }
    }

    private static class setStatus_argsStandardScheme extends StandardScheme<setStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ips = iprot.readString();
                struct.setIpsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.status = iprot.readString();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authentication = iprot.readString();
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ips != null) {
          oprot.writeFieldBegin(IPS_FIELD_DESC);
          oprot.writeString(struct.ips);
          oprot.writeFieldEnd();
        }
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeString(struct.status);
          oprot.writeFieldEnd();
        }
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          oprot.writeString(struct.authentication);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setStatus_argsTupleSchemeFactory implements SchemeFactory {
      public setStatus_argsTupleScheme getScheme() {
        return new setStatus_argsTupleScheme();
      }
    }

    private static class setStatus_argsTupleScheme extends TupleScheme<setStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIps()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        if (struct.isSetAuthentication()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIps()) {
          oprot.writeString(struct.ips);
        }
        if (struct.isSetStatus()) {
          oprot.writeString(struct.status);
        }
        if (struct.isSetAuthentication()) {
          oprot.writeString(struct.authentication);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ips = iprot.readString();
          struct.setIpsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = iprot.readString();
          struct.setStatusIsSet(true);
        }
        if (incoming.get(2)) {
          struct.authentication = iprot.readString();
          struct.setAuthenticationIsSet(true);
        }
      }
    }

  }

  public static class setStatus_result implements org.apache.thrift.TBase<setStatus_result, setStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<setStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setStatus_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setStatus_result.class, metaDataMap);
    }

    public setStatus_result() {
    }

    public setStatus_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setStatus_result(setStatus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public setStatus_result deepCopy() {
      return new setStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setStatus_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setStatus_result)
        return this.equals((setStatus_result)that);
      return false;
    }

    public boolean equals(setStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setStatus_resultStandardSchemeFactory implements SchemeFactory {
      public setStatus_resultStandardScheme getScheme() {
        return new setStatus_resultStandardScheme();
      }
    }

    private static class setStatus_resultStandardScheme extends StandardScheme<setStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setStatus_resultTupleSchemeFactory implements SchemeFactory {
      public setStatus_resultTupleScheme getScheme() {
        return new setStatus_resultTupleScheme();
      }
    }

    private static class setStatus_resultTupleScheme extends TupleScheme<setStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteIP_args implements org.apache.thrift.TBase<deleteIP_args, deleteIP_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteIP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteIP_args");

    private static final org.apache.thrift.protocol.TField IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("ips", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteIP_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteIP_argsTupleSchemeFactory());
    }

    public String ips; // required
    public String authentication; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IPS((short)1, "ips"),
      AUTHENTICATION((short)2, "authentication");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IPS
            return IPS;
          case 2: // AUTHENTICATION
            return AUTHENTICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IPS, new org.apache.thrift.meta_data.FieldMetaData("ips", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteIP_args.class, metaDataMap);
    }

    public deleteIP_args() {
    }

    public deleteIP_args(
      String ips,
      String authentication)
    {
      this();
      this.ips = ips;
      this.authentication = authentication;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteIP_args(deleteIP_args other) {
      if (other.isSetIps()) {
        this.ips = other.ips;
      }
      if (other.isSetAuthentication()) {
        this.authentication = other.authentication;
      }
    }

    public deleteIP_args deepCopy() {
      return new deleteIP_args(this);
    }

    @Override
    public void clear() {
      this.ips = null;
      this.authentication = null;
    }

    public String getIps() {
      return this.ips;
    }

    public deleteIP_args setIps(String ips) {
      this.ips = ips;
      return this;
    }

    public void unsetIps() {
      this.ips = null;
    }

    /** Returns true if field ips is set (has been assigned a value) and false otherwise */
    public boolean isSetIps() {
      return this.ips != null;
    }

    public void setIpsIsSet(boolean value) {
      if (!value) {
        this.ips = null;
      }
    }

    public String getAuthentication() {
      return this.authentication;
    }

    public deleteIP_args setAuthentication(String authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IPS:
        if (value == null) {
          unsetIps();
        } else {
          setIps((String)value);
        }
        break;

      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IPS:
        return getIps();

      case AUTHENTICATION:
        return getAuthentication();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IPS:
        return isSetIps();
      case AUTHENTICATION:
        return isSetAuthentication();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteIP_args)
        return this.equals((deleteIP_args)that);
      return false;
    }

    public boolean equals(deleteIP_args that) {
      if (that == null)
        return false;

      boolean this_present_ips = true && this.isSetIps();
      boolean that_present_ips = true && that.isSetIps();
      if (this_present_ips || that_present_ips) {
        if (!(this_present_ips && that_present_ips))
          return false;
        if (!this.ips.equals(that.ips))
          return false;
      }

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ips = true && (isSetIps());
      list.add(present_ips);
      if (present_ips)
        list.add(ips);

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteIP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIps()).compareTo(other.isSetIps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ips, other.ips);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteIP_args(");
      boolean first = true;

      sb.append("ips:");
      if (this.ips == null) {
        sb.append("null");
      } else {
        sb.append(this.ips);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteIP_argsStandardSchemeFactory implements SchemeFactory {
      public deleteIP_argsStandardScheme getScheme() {
        return new deleteIP_argsStandardScheme();
      }
    }

    private static class deleteIP_argsStandardScheme extends StandardScheme<deleteIP_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteIP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ips = iprot.readString();
                struct.setIpsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authentication = iprot.readString();
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteIP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ips != null) {
          oprot.writeFieldBegin(IPS_FIELD_DESC);
          oprot.writeString(struct.ips);
          oprot.writeFieldEnd();
        }
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          oprot.writeString(struct.authentication);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteIP_argsTupleSchemeFactory implements SchemeFactory {
      public deleteIP_argsTupleScheme getScheme() {
        return new deleteIP_argsTupleScheme();
      }
    }

    private static class deleteIP_argsTupleScheme extends TupleScheme<deleteIP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteIP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIps()) {
          optionals.set(0);
        }
        if (struct.isSetAuthentication()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIps()) {
          oprot.writeString(struct.ips);
        }
        if (struct.isSetAuthentication()) {
          oprot.writeString(struct.authentication);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteIP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ips = iprot.readString();
          struct.setIpsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authentication = iprot.readString();
          struct.setAuthenticationIsSet(true);
        }
      }
    }

  }

  public static class deleteIP_result implements org.apache.thrift.TBase<deleteIP_result, deleteIP_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteIP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteIP_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteIP_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteIP_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteIP_result.class, metaDataMap);
    }

    public deleteIP_result() {
    }

    public deleteIP_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteIP_result(deleteIP_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteIP_result deepCopy() {
      return new deleteIP_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteIP_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteIP_result)
        return this.equals((deleteIP_result)that);
      return false;
    }

    public boolean equals(deleteIP_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteIP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteIP_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteIP_resultStandardSchemeFactory implements SchemeFactory {
      public deleteIP_resultStandardScheme getScheme() {
        return new deleteIP_resultStandardScheme();
      }
    }

    private static class deleteIP_resultStandardScheme extends StandardScheme<deleteIP_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteIP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteIP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteIP_resultTupleSchemeFactory implements SchemeFactory {
      public deleteIP_resultTupleScheme getScheme() {
        return new deleteIP_resultTupleScheme();
      }
    }

    private static class deleteIP_resultTupleScheme extends TupleScheme<deleteIP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteIP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteIP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class gettingAllIP_args implements org.apache.thrift.TBase<gettingAllIP_args, gettingAllIP_args._Fields>, java.io.Serializable, Cloneable, Comparable<gettingAllIP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gettingAllIP_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gettingAllIP_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gettingAllIP_argsTupleSchemeFactory());
    }

    public String authentication; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gettingAllIP_args.class, metaDataMap);
    }

    public gettingAllIP_args() {
    }

    public gettingAllIP_args(
      String authentication)
    {
      this();
      this.authentication = authentication;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gettingAllIP_args(gettingAllIP_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = other.authentication;
      }
    }

    public gettingAllIP_args deepCopy() {
      return new gettingAllIP_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
    }

    public String getAuthentication() {
      return this.authentication;
    }

    public gettingAllIP_args setAuthentication(String authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gettingAllIP_args)
        return this.equals((gettingAllIP_args)that);
      return false;
    }

    public boolean equals(gettingAllIP_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      return list.hashCode();
    }

    @Override
    public int compareTo(gettingAllIP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gettingAllIP_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gettingAllIP_argsStandardSchemeFactory implements SchemeFactory {
      public gettingAllIP_argsStandardScheme getScheme() {
        return new gettingAllIP_argsStandardScheme();
      }
    }

    private static class gettingAllIP_argsStandardScheme extends StandardScheme<gettingAllIP_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gettingAllIP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authentication = iprot.readString();
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gettingAllIP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          oprot.writeString(struct.authentication);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gettingAllIP_argsTupleSchemeFactory implements SchemeFactory {
      public gettingAllIP_argsTupleScheme getScheme() {
        return new gettingAllIP_argsTupleScheme();
      }
    }

    private static class gettingAllIP_argsTupleScheme extends TupleScheme<gettingAllIP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gettingAllIP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthentication()) {
          oprot.writeString(struct.authentication);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gettingAllIP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authentication = iprot.readString();
          struct.setAuthenticationIsSet(true);
        }
      }
    }

  }

  public static class gettingAllIP_result implements org.apache.thrift.TBase<gettingAllIP_result, gettingAllIP_result._Fields>, java.io.Serializable, Cloneable, Comparable<gettingAllIP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gettingAllIP_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gettingAllIP_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gettingAllIP_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "List")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gettingAllIP_result.class, metaDataMap);
    }

    public gettingAllIP_result() {
    }

    public gettingAllIP_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gettingAllIP_result(gettingAllIP_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public gettingAllIP_result deepCopy() {
      return new gettingAllIP_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public gettingAllIP_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gettingAllIP_result)
        return this.equals((gettingAllIP_result)that);
      return false;
    }

    public boolean equals(gettingAllIP_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(gettingAllIP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gettingAllIP_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gettingAllIP_resultStandardSchemeFactory implements SchemeFactory {
      public gettingAllIP_resultStandardScheme getScheme() {
        return new gettingAllIP_resultStandardScheme();
      }
    }

    private static class gettingAllIP_resultStandardScheme extends StandardScheme<gettingAllIP_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gettingAllIP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list60.size);
                  String _elem61;
                  for (int _i62 = 0; _i62 < _list60.size; ++_i62)
                  {
                    _elem61 = iprot.readString();
                    struct.success.add(_elem61);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gettingAllIP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter63 : struct.success)
            {
              oprot.writeString(_iter63);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gettingAllIP_resultTupleSchemeFactory implements SchemeFactory {
      public gettingAllIP_resultTupleScheme getScheme() {
        return new gettingAllIP_resultTupleScheme();
      }
    }

    private static class gettingAllIP_resultTupleScheme extends TupleScheme<gettingAllIP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gettingAllIP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter64 : struct.success)
            {
              oprot.writeString(_iter64);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gettingAllIP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list65.size);
            String _elem66;
            for (int _i67 = 0; _i67 < _list65.size; ++_i67)
            {
              _elem66 = iprot.readString();
              struct.success.add(_elem66);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class gettingWarningIP_args implements org.apache.thrift.TBase<gettingWarningIP_args, gettingWarningIP_args._Fields>, java.io.Serializable, Cloneable, Comparable<gettingWarningIP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gettingWarningIP_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gettingWarningIP_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gettingWarningIP_argsTupleSchemeFactory());
    }

    public String authentication; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gettingWarningIP_args.class, metaDataMap);
    }

    public gettingWarningIP_args() {
    }

    public gettingWarningIP_args(
      String authentication)
    {
      this();
      this.authentication = authentication;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gettingWarningIP_args(gettingWarningIP_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = other.authentication;
      }
    }

    public gettingWarningIP_args deepCopy() {
      return new gettingWarningIP_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
    }

    public String getAuthentication() {
      return this.authentication;
    }

    public gettingWarningIP_args setAuthentication(String authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gettingWarningIP_args)
        return this.equals((gettingWarningIP_args)that);
      return false;
    }

    public boolean equals(gettingWarningIP_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      return list.hashCode();
    }

    @Override
    public int compareTo(gettingWarningIP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gettingWarningIP_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gettingWarningIP_argsStandardSchemeFactory implements SchemeFactory {
      public gettingWarningIP_argsStandardScheme getScheme() {
        return new gettingWarningIP_argsStandardScheme();
      }
    }

    private static class gettingWarningIP_argsStandardScheme extends StandardScheme<gettingWarningIP_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gettingWarningIP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.authentication = iprot.readString();
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gettingWarningIP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          oprot.writeString(struct.authentication);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gettingWarningIP_argsTupleSchemeFactory implements SchemeFactory {
      public gettingWarningIP_argsTupleScheme getScheme() {
        return new gettingWarningIP_argsTupleScheme();
      }
    }

    private static class gettingWarningIP_argsTupleScheme extends TupleScheme<gettingWarningIP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gettingWarningIP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthentication()) {
          oprot.writeString(struct.authentication);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gettingWarningIP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authentication = iprot.readString();
          struct.setAuthenticationIsSet(true);
        }
      }
    }

  }

  public static class gettingWarningIP_result implements org.apache.thrift.TBase<gettingWarningIP_result, gettingWarningIP_result._Fields>, java.io.Serializable, Cloneable, Comparable<gettingWarningIP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gettingWarningIP_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gettingWarningIP_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gettingWarningIP_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "List")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gettingWarningIP_result.class, metaDataMap);
    }

    public gettingWarningIP_result() {
    }

    public gettingWarningIP_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gettingWarningIP_result(gettingWarningIP_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public gettingWarningIP_result deepCopy() {
      return new gettingWarningIP_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public gettingWarningIP_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gettingWarningIP_result)
        return this.equals((gettingWarningIP_result)that);
      return false;
    }

    public boolean equals(gettingWarningIP_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(gettingWarningIP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gettingWarningIP_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gettingWarningIP_resultStandardSchemeFactory implements SchemeFactory {
      public gettingWarningIP_resultStandardScheme getScheme() {
        return new gettingWarningIP_resultStandardScheme();
      }
    }

    private static class gettingWarningIP_resultStandardScheme extends StandardScheme<gettingWarningIP_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gettingWarningIP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list68.size);
                  String _elem69;
                  for (int _i70 = 0; _i70 < _list68.size; ++_i70)
                  {
                    _elem69 = iprot.readString();
                    struct.success.add(_elem69);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gettingWarningIP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter71 : struct.success)
            {
              oprot.writeString(_iter71);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gettingWarningIP_resultTupleSchemeFactory implements SchemeFactory {
      public gettingWarningIP_resultTupleScheme getScheme() {
        return new gettingWarningIP_resultTupleScheme();
      }
    }

    private static class gettingWarningIP_resultTupleScheme extends TupleScheme<gettingWarningIP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gettingWarningIP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter72 : struct.success)
            {
              oprot.writeString(_iter72);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gettingWarningIP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list73.size);
            String _elem74;
            for (int _i75 = 0; _i75 < _list73.size; ++_i75)
            {
              _elem74 = iprot.readString();
              struct.success.add(_elem74);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class gettingAuthentication_args implements org.apache.thrift.TBase<gettingAuthentication_args, gettingAuthentication_args._Fields>, java.io.Serializable, Cloneable, Comparable<gettingAuthentication_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gettingAuthentication_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gettingAuthentication_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gettingAuthentication_argsTupleSchemeFactory());
    }

    public String username; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gettingAuthentication_args.class, metaDataMap);
    }

    public gettingAuthentication_args() {
    }

    public gettingAuthentication_args(
      String username,
      String password)
    {
      this();
      this.username = username;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gettingAuthentication_args(gettingAuthentication_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public gettingAuthentication_args deepCopy() {
      return new gettingAuthentication_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
    }

    public String getUsername() {
      return this.username;
    }

    public gettingAuthentication_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public gettingAuthentication_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gettingAuthentication_args)
        return this.equals((gettingAuthentication_args)that);
      return false;
    }

    public boolean equals(gettingAuthentication_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      return list.hashCode();
    }

    @Override
    public int compareTo(gettingAuthentication_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gettingAuthentication_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gettingAuthentication_argsStandardSchemeFactory implements SchemeFactory {
      public gettingAuthentication_argsStandardScheme getScheme() {
        return new gettingAuthentication_argsStandardScheme();
      }
    }

    private static class gettingAuthentication_argsStandardScheme extends StandardScheme<gettingAuthentication_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gettingAuthentication_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gettingAuthentication_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gettingAuthentication_argsTupleSchemeFactory implements SchemeFactory {
      public gettingAuthentication_argsTupleScheme getScheme() {
        return new gettingAuthentication_argsTupleScheme();
      }
    }

    private static class gettingAuthentication_argsTupleScheme extends TupleScheme<gettingAuthentication_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gettingAuthentication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gettingAuthentication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class gettingAuthentication_result implements org.apache.thrift.TBase<gettingAuthentication_result, gettingAuthentication_result._Fields>, java.io.Serializable, Cloneable, Comparable<gettingAuthentication_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gettingAuthentication_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gettingAuthentication_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gettingAuthentication_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gettingAuthentication_result.class, metaDataMap);
    }

    public gettingAuthentication_result() {
    }

    public gettingAuthentication_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gettingAuthentication_result(gettingAuthentication_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public gettingAuthentication_result deepCopy() {
      return new gettingAuthentication_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public gettingAuthentication_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gettingAuthentication_result)
        return this.equals((gettingAuthentication_result)that);
      return false;
    }

    public boolean equals(gettingAuthentication_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(gettingAuthentication_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gettingAuthentication_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gettingAuthentication_resultStandardSchemeFactory implements SchemeFactory {
      public gettingAuthentication_resultStandardScheme getScheme() {
        return new gettingAuthentication_resultStandardScheme();
      }
    }

    private static class gettingAuthentication_resultStandardScheme extends StandardScheme<gettingAuthentication_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gettingAuthentication_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gettingAuthentication_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gettingAuthentication_resultTupleSchemeFactory implements SchemeFactory {
      public gettingAuthentication_resultTupleScheme getScheme() {
        return new gettingAuthentication_resultTupleScheme();
      }
    }

    private static class gettingAuthentication_resultTupleScheme extends TupleScheme<gettingAuthentication_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gettingAuthentication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gettingAuthentication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
